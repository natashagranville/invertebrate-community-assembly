library(NST)
library(iCAMP)
library(fossil)
library(dplyr)
library(tidyr)
library(phytools)
library(ggtree)
library(ggplot2)
library(safedata)
set_safe_dir('my_safe_directory')
getOption('safedata.dir')


##################################################################################
#################################### WEEVILS #####################################
##################################################################################

## Weevil (beetle family superfamily Curculionoidea) abundance data collected by Adam Sharp et al. https://doi.org/10.5281/zenodo.1323504 

# Load the Staphylinidae data
weevils <- load_safe_data(1323504, 'Weevils')
View(weevils)

# Remove oil palm
weevils <- weevils[ grep("OP", weevils$site, invert = TRUE) , ] 

# Construct community composition matrix

count <- weevils %>% group_by(site) %>% add_count(taxon)
weevils$Count <- count$n
weevils <- as.data.frame(weevils %>% group_by(site) %>% distinct(taxon, .keep_all= TRUE)) # Remove repetition

weevils_composition_matrix <- create.matrix(weevils,  tax.name = "taxon",  locality = "site", abund = TRUE, abund.col = "Count")
weevils_composition_matrix <- t(weevils_composition_matrix)

sum(colSums(weevils_composition_matrix)) # number of individuals
ncol(weevils_composition_matrix) # number of species
nrow(weevils_composition_matrix) # number of sites

## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
ACD_all <- read.csv("ACD_LIDAR.csv")
colnames(ACD_all) <- slice(ACD_all, 5)
ACD_all <- ACD_all[-(1:5), ]

# Log-transformation
ACD_all$agb <- as.numeric(ACD_all$agb)
summary(ACD_all$agb)
ACD_all$logACD <- log10(as.numeric(ACD_all$agb))

# Select only sites that are in weevils_composition_matrix
ACD_weevils <- subset(ACD_all, ACD_all$ID %in% rownames(weevils_composition_matrix))

# Calculate mean ACD
ACD_weevils <- separate(ACD_weevils, ID, into = c("block", "num"), remove = FALSE)
ACD_weevils <- as.data.frame(ACD_weevils %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_weevils_summary <- as.data.frame(ACD_weevils %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))

# Just sampling block names to be used for analysis
Sites_weevils <- subset(ACD_weevils, select = c(ID, block))
rownames(Sites_weevils) <- Sites_weevils[, 1]
Sites_weevils <- subset(Sites_weevils, select = block)


##### NST - normalised stochasticity ratio #####

NST_weevils <- tNST(weevils_composition_matrix, Sites_weevils, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)
NST_weevils$index.grp
mean(NST_weevils$index.grp$NST.i.ruzicka)

NST_weevils_summary <- subset(NST_weevils$index.grp, select = c(group, NST.i.ruzicka))

NST_weevils_summary <- NST_weevils_summary %>% split(NST_weevils_summary$group) # Split so you can separately index each sampling block

NST_weevils_summary

# Bootstrapping
NST_weevils_boot <- nst.boot(NST_weevils, out.detail = TRUE, nworker = 2)
NST_weevils_boot

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw
NST_weevils_boot$detail

NST_weevils_A <- c('A', NST_weevils_summary$'A'$NST.i.ruzicka, 
                   quantile(NST_weevils_boot$detail$NST.boot$'A', probs = 0.025), 
                   quantile(NST_weevils_boot$detail$NST.boot$'A', probs = 0.975))
NST_weevils_B <- c('B', NST_weevils_summary$'B'$NST.i.ruzicka, 
                   quantile(NST_weevils_boot$detail$NST.boot$'B', probs = 0.025), 
                   quantile(NST_weevils_boot$detail$NST.boot$'B', probs = 0.975))
NST_weevils_C <- c('C', NST_weevils_summary$'C'$NST.i.ruzicka, 
                   quantile(NST_weevils_boot$detail$NST.boot$'C', probs = 0.025), 
                   quantile(NST_weevils_boot$detail$NST.boot$'C', probs = 0.975))
NST_weevils_D <- c('D', NST_weevils_summary$'D'$NST.i.ruzicka, 
                   quantile(NST_weevils_boot$detail$NST.boot$'D', probs = 0.025), 
                   quantile(NST_weevils_boot$detail$NST.boot$'D', probs = 0.975))
NST_weevils_E <- c('E', NST_weevils_summary$'E'$NST.i.ruzicka, 
                   quantile(NST_weevils_boot$detail$NST.boot$'E', probs = 0.025), 
                   quantile(NST_weevils_boot$detail$NST.boot$'E', probs = 0.975))
NST_weevils_F <- c('F', NST_weevils_summary$'F'$NST.i.ruzicka, 
                   quantile(NST_weevils_boot$detail$NST.boot$'F', probs = 0.025), 
                   quantile(NST_weevils_boot$detail$NST.boot$'F', probs = 0.975))
NST_weevils_LF1 <- c('LF1', NST_weevils_summary$'LF1'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'LF1', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'LF1', probs = 0.975))
NST_weevils_LF2 <- c('LF2', NST_weevils_summary$'LF2'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'LF2', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'LF2', probs = 0.975))
NST_weevils_LF3 <- c('LF3', NST_weevils_summary$'LF3'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'LF3', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'LF3', probs = 0.975))
NST_weevils_LFE <- c('LFE', NST_weevils_summary$'LFE'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'LFE', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'LFE', probs = 0.975))
NST_weevils_VJR <- c('VJR', NST_weevils_summary$'VJR'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'VJR', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'VJR', probs = 0.975))
NST_weevils_OG1 <- c('OG1', NST_weevils_summary$'OG1'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'OG1', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'OG1', probs = 0.975))
NST_weevils_OG2 <- c('OG2', NST_weevils_summary$'OG2'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'OG2', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'OG2', probs = 0.975))
NST_weevils_OG3 <- c('OG3', NST_weevils_summary$'OG3'$NST.i.ruzicka, 
                     quantile(NST_weevils_boot$detail$NST.boot$'OG3', probs = 0.025), 
                     quantile(NST_weevils_boot$detail$NST.boot$'OG3', probs = 0.975))

NST_weevils_summary <- as.data.frame(rbind(NST_weevils_A, NST_weevils_B, NST_weevils_C, NST_weevils_D,
                                           NST_weevils_E, NST_weevils_F, NST_weevils_LF1, NST_weevils_LF2, 
                                           NST_weevils_LF3, NST_weevils_LFE, NST_weevils_VJR, NST_weevils_OG1,
                                           NST_weevils_OG2, NST_weevils_OG3))

colnames(NST_weevils_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_weevils_summary) = 1:14

NST_weevils_summary$mean <- as.numeric(NST_weevils_summary$mean)
NST_weevils_summary$lower.95.quant <- as.numeric(NST_weevils_summary$lower.95.quant)
NST_weevils_summary$upper.95.quant <- as.numeric(NST_weevils_summary$upper.95.quant)

NST_weevils_summary <- left_join(NST_weevils_summary, ACD_weevils_summary, by = "block")

NST_weevils_summary$range <- NST_weevils_summary$upper.95.quant - NST_weevils_summary$lower.95.quant

NST_weevils_summary 

write.csv(NST_weevils_summary, file = "Results/NST_weevils_summary.csv")

##### MST - Modified stochasticity ratio #####

MST_weevils_summary <- subset(NST_weevils$index.grp, select = c(group, MST.i.ruzicka))

MST_weevils_summary <- MST_weevils_summary %>% split(MST_weevils_summary$group) # Split so you can separately index each sampling block


MST_weevils_boot <- NST_weevils_boot


MST_weevils_A <- c('A', MST_weevils_summary$'A'$MST.i.ruzicka, 
                   quantile(MST_weevils_boot$detail$MST.boot$'A', probs = 0.025), 
                   quantile(MST_weevils_boot$detail$MST.boot$'A', probs = 0.975))
MST_weevils_B <- c('B', MST_weevils_summary$'B'$MST.i.ruzicka, 
                   quantile(MST_weevils_boot$detail$MST.boot$'B', probs = 0.025), 
                   quantile(MST_weevils_boot$detail$MST.boot$'B', probs = 0.975))
MST_weevils_C <- c('C', MST_weevils_summary$'C'$MST.i.ruzicka, 
                   quantile(MST_weevils_boot$detail$MST.boot$'C', probs = 0.025), 
                   quantile(MST_weevils_boot$detail$MST.boot$'C', probs = 0.975))
MST_weevils_D <- c('D', MST_weevils_summary$'D'$MST.i.ruzicka, 
                   quantile(MST_weevils_boot$detail$MST.boot$'D', probs = 0.025), 
                   quantile(MST_weevils_boot$detail$MST.boot$'D', probs = 0.975))
MST_weevils_E <- c('E', MST_weevils_summary$'E'$MST.i.ruzicka, 
                   quantile(MST_weevils_boot$detail$MST.boot$'E', probs = 0.025), 
                   quantile(MST_weevils_boot$detail$MST.boot$'E', probs = 0.975))
MST_weevils_F <- c('F', MST_weevils_summary$'F'$MST.i.ruzicka, 
                   quantile(MST_weevils_boot$detail$MST.boot$'F', probs = 0.025), 
                   quantile(MST_weevils_boot$detail$MST.boot$'F', probs = 0.975))
MST_weevils_LF1 <- c('LF1', MST_weevils_summary$'LF1'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'LF1', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'LF1', probs = 0.975))
MST_weevils_LF2 <- c('LF2', MST_weevils_summary$'LF2'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'LF2', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'LF2', probs = 0.975))
MST_weevils_LF3 <- c('LF3', MST_weevils_summary$'LF3'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'LF3', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'LF3', probs = 0.975))
MST_weevils_LFE <- c('LFE', MST_weevils_summary$'LFE'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'LFE', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'LFE', probs = 0.975))
MST_weevils_VJR <- c('VJR', MST_weevils_summary$'VJR'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'VJR', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'VJR', probs = 0.975))
MST_weevils_OG1 <- c('OG1', MST_weevils_summary$'OG1'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'OG1', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'OG1', probs = 0.975))
MST_weevils_OG2 <- c('OG2', MST_weevils_summary$'OG2'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'OG2', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'OG2', probs = 0.975))
MST_weevils_OG3 <- c('OG3', MST_weevils_summary$'OG3'$MST.i.ruzicka, 
                     quantile(MST_weevils_boot$detail$MST.boot$'OG3', probs = 0.025), 
                     quantile(MST_weevils_boot$detail$MST.boot$'OG3', probs = 0.975))

MST_weevils_summary <- as.data.frame(rbind(MST_weevils_A, MST_weevils_B, MST_weevils_C, MST_weevils_D,
                                           MST_weevils_E, MST_weevils_F, MST_weevils_LF1, MST_weevils_LF2, 
                                           MST_weevils_LF3, MST_weevils_LFE, MST_weevils_VJR, MST_weevils_OG1,
                                           MST_weevils_OG2, MST_weevils_OG3))

colnames(MST_weevils_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_weevils_summary) = 1:14

MST_weevils_summary$mean <- as.numeric(MST_weevils_summary$mean)
MST_weevils_summary$lower.95.quant <- as.numeric(MST_weevils_summary$lower.95.quant)
MST_weevils_summary$upper.95.quant <- as.numeric(MST_weevils_summary$upper.95.quant)

MST_weevils_summary <- left_join(MST_weevils_summary, ACD_weevils_summary, by = "block")

MST_weevils_summary$range <- MST_weevils_summary$upper.95.quant - MST_weevils_summary$lower.95.quant

MST_weevils_summary 

write.csv(MST_weevils_summary, file = "Results/MST_weevils_summary.csv")


##### NTP - Neutral taxa percentage #####
weevils_composition_matrix <- as.data.frame(weevils_composition_matrix)
str(weevils_composition_matrix)

# Fit Sloan's neutral model
SNM_weevils <- snm.comm(comm = weevils_composition_matrix, treat = Sites_weevils)
SNM_weevils$stats

NTP_weevils_data <- SNM_weevils$ratio.summary  %>% filter(index == "mean")
NTP_weevils_data <- NTP_weevils_data  %>% dplyr :: select(index, treatment.id, Neutral.wt)

NTP_weevils_data <- NTP_weevils_data %>% split(NTP_weevils_data$treatment.id)

NTP_weevils_data

NTP_weevils_A <- c('A', NTP_weevils_data$`A`$Neutral.wt, 
                   quantile(SNM_weevils$boot.detail$block$'A'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_weevils$boot.detail$block$'A'$Neutral.wt, probs = 0.975))

NTP_weevils_B <- c('B', NTP_weevils_data$`B`$Neutral.wt, 
                   quantile(SNM_weevils$boot.detail$block$'B'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_weevils$boot.detail$block$'B'$Neutral.wt, probs = 0.975))

NTP_weevils_C <- c('C', NTP_weevils_data$`C`$Neutral.wt, 
                   quantile(SNM_weevils$boot.detail$block$'C'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_weevils$boot.detail$block$'C'$Neutral.wt, probs = 0.975))

NTP_weevils_D <- c('D', NTP_weevils_data$`D`$Neutral.wt, 
                   quantile(SNM_weevils$boot.detail$block$'D'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_weevils$boot.detail$block$'D'$Neutral.wt, probs = 0.975))

NTP_weevils_E <- c('E', NTP_weevils_data$`E`$Neutral.wt, 
                   quantile(SNM_weevils$boot.detail$block$'E'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_weevils$boot.detail$block$'E'$Neutral.wt, probs = 0.975))

NTP_weevils_F <- c('F', NTP_weevils_data$`F`$Neutral.wt, 
                   quantile(SNM_weevils$boot.detail$block$'F'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_weevils$boot.detail$block$'F'$Neutral.wt, probs = 0.975))

NTP_weevils_LF1 <- c('LF2', NTP_weevils_data$`LF1`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'LF1'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'LF1'$Neutral.wt, probs = 0.975))

NTP_weevils_LF2 <- c('LF2', NTP_weevils_data$`LF2`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'LF2'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'LF2'$Neutral.wt, probs = 0.975))

NTP_weevils_LF3 <- c('LF3', NTP_weevils_data$`LF3`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'LF3'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'LF3'$Neutral.wt, probs = 0.975))

NTP_weevils_LFE <- c('LFE', NTP_weevils_data$`LFE`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'LFE'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'LFE'$Neutral.wt, probs = 0.975))

NTP_weevils_VJR <- c('VJR', NTP_weevils_data$`VJR`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'VJR'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'VJR'$Neutral.wt, probs = 0.975))

NTP_weevils_OG1 <- c('OG1', NTP_weevils_data$`OG1`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'OG1'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'OG1'$Neutral.wt, probs = 0.975))

NTP_weevils_OG2 <- c('OG2', NTP_weevils_data$`OG2`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'OG2'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'OG2'$Neutral.wt, probs = 0.975))

NTP_weevils_OG3 <- c('OG3', NTP_weevils_data$`OG3`$Neutral.wt, 
                     quantile(SNM_weevils$boot.detail$block$'OG3'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_weevils$boot.detail$block$'OG3'$Neutral.wt, probs = 0.975))

NTP_weevils_summary <- as.data.frame(rbind(NTP_weevils_A, NTP_weevils_B, NTP_weevils_C, NTP_weevils_D,
                                           NTP_weevils_E, NTP_weevils_F, NTP_weevils_LF1, NTP_weevils_LF2, 
                                           NTP_weevils_LF3, NTP_weevils_LFE, NTP_weevils_VJR, NTP_weevils_OG1, 
                                           NTP_weevils_OG2, NTP_weevils_OG3))
NTP_weevils_summary

# Rename column and row headings
colnames(NTP_weevils_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NTP_weevils_summary) = 1:14

# Add mean ACD
NTP_weevils_summary <- left_join(NTP_weevils_summary, ACD_weevils_summary, by = "block")

str(NTP_weevils_summary)
NTP_weevils_summary$mean <- as.numeric(NTP_weevils_summary$mean)
NTP_weevils_summary$lower.95.quant <- as.numeric(NTP_weevils_summary$lower.95.quant)
NTP_weevils_summary$upper.95.quant <- as.numeric(NTP_weevils_summary$upper.95.quant)

NTP_weevils_summary$range <- NTP_weevils_summary$upper.95.quant - NTP_weevils_summary$lower.95.quant

mean(NTP_weevils_summary$mean)

write.csv(NTP_weevils_summary, file = "Results/NTP_weevils_summary.csv")

##### iCAMP - inferring community assembly mechanisms by phylogenetic bin-based null model analysis #####

## Phylogeny 
beetles_phylo <- get_phylogeny(1323504)
weevils_tips <-  intersect(beetles_phylo[["tip.labels"]], colnames(weevils_composition_matrix))
weevils_phylo <- ape::keep.tip(beetles_phylo, weevils_tips)
weevils_phylo$tip.labels <- NULL
weevils_phylo$node.labels <- NULL
str(weevils_phylo)

# Root the tree
weevils_phylo_rooted <- phytools::midpoint.root(weevils_phylo)
weevils_phylo_rooted

# Phylogenetic distance matrix
pd.weevils = pdist.big(tree = weevils_phylo_rooted, wd=save.wd, nworker = 8, memory.G = 500)

iCAMP_weevils =iCAMP::icamp.big(comm=weevils_composition_matrix, pd.desc = pd.weevils$pd.file, pd.spname=pd.weevils$tip.label,
                                pd.wd = save.wd, rand = 500, tree=weevils_phylo_rooted,
                                prefix = 'weevils', ds = 0.2, pd.cut = NA, sp.check = TRUE,
                                phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                                phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                                nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                                qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                                correct.special = TRUE, unit.sum = rowSums(weevils_composition_matrix), special.method = "depend",
                                ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)

# Calculate mean of each process in each sampling block 
iCAMP_weevils_processes <- as.data.frame(iCAMP_weevils$detail$processes)
colnames(iCAMP_weevils_processes)
colnames(iCAMP_weevils_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')

colMeans(iCAMP_weevils_processes[3:7])

iCAMP_weevils_processes <- tidyr::separate(iCAMP_weevils_processes, sample2, into = c("block", "num")) 

library(dplyr)
iCAMP_weevils_processes_summary <- as.data.frame(iCAMP_weevils_processes %>% group_by(block) %>% summarise(mean_HeS = mean(HeS),
                                                                                                           mean_HoS = mean(HoS), 
                                                                                                           mean_DL = mean(DL),
                                                                                                           mean_HoD = mean(HoD),
                                                                                                           mean_Dr = mean(Dr)))
colMeans(iCAMP_weevils_processes_summary[2:6])

# Join with log ACD
iCAMP_weevils_processes_summary
ACD_weevils_summary
iCAMP_weevils_processes_summary <- left_join(iCAMP_weevils_processes_summary, ACD_weevils_summary, by = 'block')

## Phylogenetic bins
iCAMP_weevils$detail$taxabin$state.united$bin.united.tax.num # number of taxa in each bin
iCAMP_weevils$detail$taxabin$sp.bin # which species are in each bin

write.csv(iCAMP_weevils_processes_summary, file = "Results/iCAMP_weevils_processes_summary.csv")

## Plot tree and show bins
ggtree(weevils_phylo) +
  geom_tiplab(size = 3) +
  geom_nodelab(size = 3, nudge_x =-0.5, nudge_y = 1.2) +
  geom_strip('Exec1', 'Anth1', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('Acic2', 'Bari1', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  geom_strip('Rhyn7', 'Brent1', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  xlim(0,5) +
  ggtitle("Weevils") +
  theme(plot.margin = unit(c(0.1,0.1,0.5,0.1), "cm"), 
        plot.title = element_text(size = 15))
ggsave("WeevilsTree.pdf", width = 15, height = 55, units = "cm")


########################################################################################
################################## Rove beetles ########################################
########################################################################################

## Staphylinidae abundance data collected by Adam Sharp et al. https://doi.org/10.5281/zenodo.1323504 
# Load the Staphylinidae data
rove_beetles <- load_safe_data(1323504, 'Staphs')

# Remove oil palm
rove_beetles <- rove_beetles[ grep("OP", rove_beetles$site, invert = TRUE) , ] 

# Remove taxa that are not in the phylogeny for rove beetles, therefore also not in the iCAMP analysis (includes removing 12131 Staphylinidae that are only identified to family level)
rove_beetles <- subset(rove_beetles, taxon != 'Staphylinidae')
rove_beetles <- subset(rove_beetles, taxon != 'Anotylus') 
rove_beetles <- subset(rove_beetles, taxon != 'Thinocharis')

# Construct community composition matrix
count <- rove_beetles %>% group_by(site) %>% add_count(taxon)
rove_beetles$Count <- count$n
rove_beetles <- as.data.frame(rove_beetles %>% group_by(site) %>% distinct(taxon, .keep_all= TRUE)) # Remove repetition

rove_beetles_composition_matrix <- create.matrix(rove_beetles,  tax.name = "taxon",  locality = "site", abund = TRUE, abund.col = "Count")
rove_beetles_composition_matrix <- t(rove_beetles_composition_matrix)
colSums(rove_beetles_composition_matrix)
rove_beetles_composition_matrix <- as.data.frame(rove_beetles_composition_matrix)

sum(colSums(rove_beetles_composition_matrix)) # number of individuals
ncol(rove_beetles_composition_matrix) # number of species
nrow(rove_beetles_composition_matrix) # number of sites


## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
# Select only sites that are in rove_beetles_composition_matrix
ACD_rove_beetles <- subset(ACD_all, ACD_all$ID %in% rownames(rove_beetles_composition_matrix))

# Calculate mean ACD
ACD_rove_beetles <- separate(ACD_rove_beetles, ID, into = c("block", "num"), remove = FALSE)
ACD_rove_beetles <- as.data.frame(ACD_rove_beetles %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_rove_beetles_summary <- as.data.frame(ACD_rove_beetles %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))

# Just sampling block names to be used for analysis
Sites_rove_beetles <- subset(ACD_rove_beetles, select = c(ID, block))
rownames(Sites_rove_beetles) <- Sites_rove_beetles[, 1]
Sites_rove_beetles <- subset(Sites_rove_beetles, select = block)


##### NST - normalised stochasticity ratio #####
NST_rove_beetles <- tNST(rove_beetles_composition_matrix, Sites_rove_beetles, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)
mean(NST_rove_beetles$index.grp$NST.i.ruzicka)

NST_rove_beetles_summary <- subset(NST_rove_beetles$index.grp, select = c(group, NST.i.ruzicka))

NST_rove_beetles_summary <- NST_rove_beetles_summary %>% split(NST_rove_beetles_summary$group) # Split so you can separately index each sampling block

# Bootstrapping
NST_rove_beetles_boot <- nst.boot(NST_rove_beetles, out.detail = TRUE, nworker = 2)
NST_rove_beetles_boot

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw

NST_rove_beetles_A <- c('A', NST_rove_beetles_summary$'A'$NST.i.ruzicka, 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'A', probs = 0.025), 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'A', probs = 0.975))
NST_rove_beetles_B <- c('B', NST_rove_beetles_summary$'B'$NST.i.ruzicka, 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'B', probs = 0.025), 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'B', probs = 0.975))
NST_rove_beetles_C <- c('C', NST_rove_beetles_summary$'C'$NST.i.ruzicka, 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'C', probs = 0.025), 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'C', probs = 0.975))
NST_rove_beetles_D <- c('D', NST_rove_beetles_summary$'D'$NST.i.ruzicka, 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'D', probs = 0.025), 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'D', probs = 0.975))
NST_rove_beetles_E <- c('E', NST_rove_beetles_summary$'E'$NST.i.ruzicka, 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'E', probs = 0.025), 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'E', probs = 0.975))
NST_rove_beetles_F <- c('F', NST_rove_beetles_summary$'F'$NST.i.ruzicka, 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'F', probs = 0.025), 
                        quantile(NST_rove_beetles_boot$detail$NST.boot$'F', probs = 0.975))
NST_rove_beetles_LF1 <- c('LF1', NST_rove_beetles_summary$'LF1'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LF1', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LF1', probs = 0.975))
NST_rove_beetles_LF2 <- c('LF2', NST_rove_beetles_summary$'LF2'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LF2', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LF2', probs = 0.975))
NST_rove_beetles_LF3 <- c('LF3', NST_rove_beetles_summary$'LF3'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LF3', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LF3', probs = 0.975))
NST_rove_beetles_LFE <- c('LFE', NST_rove_beetles_summary$'LFE'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LFE', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'LFE', probs = 0.975))
NST_rove_beetles_VJR <- c('VJR', NST_rove_beetles_summary$'VJR'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'VJR', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'VJR', probs = 0.975))
NST_rove_beetles_OG1 <- c('OG1', NST_rove_beetles_summary$'OG1'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'OG1', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'OG1', probs = 0.975))
NST_rove_beetles_OG2 <- c('OG2', NST_rove_beetles_summary$'OG2'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'OG2', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'OG2', probs = 0.975))
NST_rove_beetles_OG3 <- c('OG3', NST_rove_beetles_summary$'OG3'$NST.i.ruzicka, 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'OG3', probs = 0.025), 
                          quantile(NST_rove_beetles_boot$detail$NST.boot$'OG3', probs = 0.975))

NST_rove_beetles_summary <- as.data.frame(rbind(NST_rove_beetles_A, NST_rove_beetles_B, NST_rove_beetles_C, NST_rove_beetles_D,
                                                NST_rove_beetles_E, NST_rove_beetles_F, NST_rove_beetles_LF1, NST_rove_beetles_LF2, 
                                                NST_rove_beetles_LF3, NST_rove_beetles_LFE, NST_rove_beetles_VJR, NST_rove_beetles_OG1,
                                                NST_rove_beetles_OG2, NST_rove_beetles_OG3))
NST_rove_beetles_summary 

colnames(NST_rove_beetles_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_rove_beetles_summary) = 1:14


NST_rove_beetles_summary$mean <- as.numeric(NST_rove_beetles_summary$mean)
NST_rove_beetles_summary$lower.95.quant <- as.numeric(NST_rove_beetles_summary$lower.95.quant)
NST_rove_beetles_summary$upper.95.quant <- as.numeric(NST_rove_beetles_summary$upper.95.quant)

NST_rove_beetles_summary <- left_join(NST_rove_beetles_summary, ACD_rove_beetles_summary, by = "block")

NST_rove_beetles_summary$range <- NST_rove_beetles_summary$upper.95.quant - NST_rove_beetles_summary$lower.95.quant

mean(NST_rove_beetles_summary $ mean)

write.csv(NST_rove_beetles_summary, file = "Results/NST_rove_beetles_summary.csv")

##### MST - Modified stochasticity ratio #####

MST_rove_beetles_summary <- subset(NST_rove_beetles$index.grp, select = c(group, MST.i.ruzicka))

MST_rove_beetles_summary <- MST_rove_beetles_summary %>% split(MST_rove_beetles_summary$group) # Split so you can separately index each sampling block

MST_rove_beetles_boot <- NST_rove_beetles_boot


MST_rove_beetles_A <- c('A', MST_rove_beetles_summary$'A'$MST.i.ruzicka, 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'A', probs = 0.025), 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'A', probs = 0.975))
MST_rove_beetles_B <- c('B', MST_rove_beetles_summary$'B'$MST.i.ruzicka, 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'B', probs = 0.025), 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'B', probs = 0.975))
MST_rove_beetles_C <- c('C', MST_rove_beetles_summary$'C'$MST.i.ruzicka, 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'C', probs = 0.025), 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'C', probs = 0.975))
MST_rove_beetles_D <- c('D', MST_rove_beetles_summary$'D'$MST.i.ruzicka, 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'D', probs = 0.025), 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'D', probs = 0.975))
MST_rove_beetles_E <- c('E', MST_rove_beetles_summary$'E'$MST.i.ruzicka, 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'E', probs = 0.025), 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'E', probs = 0.975))
MST_rove_beetles_F <- c('F', MST_rove_beetles_summary$'F'$MST.i.ruzicka, 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'F', probs = 0.025), 
                        quantile(MST_rove_beetles_boot$detail$MST.boot$'F', probs = 0.975))
MST_rove_beetles_LF1 <- c('LF1', MST_rove_beetles_summary$'LF1'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LF1', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LF1', probs = 0.975))
MST_rove_beetles_LF2 <- c('LF2', MST_rove_beetles_summary$'LF2'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LF2', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LF2', probs = 0.975))
MST_rove_beetles_LF3 <- c('LF3', MST_rove_beetles_summary$'LF3'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LF3', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LF3', probs = 0.975))
MST_rove_beetles_LFE <- c('LFE', MST_rove_beetles_summary$'LFE'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LFE', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'LFE', probs = 0.975))
MST_rove_beetles_VJR <- c('VJR', MST_rove_beetles_summary$'VJR'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'VJR', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'VJR', probs = 0.975))
MST_rove_beetles_OG1 <- c('OG1', MST_rove_beetles_summary$'OG1'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'OG1', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'OG1', probs = 0.975))
MST_rove_beetles_OG2 <- c('OG2', MST_rove_beetles_summary$'OG2'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'OG2', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'OG2', probs = 0.975))
MST_rove_beetles_OG3 <- c('OG3', MST_rove_beetles_summary$'OG3'$MST.i.ruzicka, 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'OG3', probs = 0.025), 
                          quantile(MST_rove_beetles_boot$detail$MST.boot$'OG3', probs = 0.975))

MST_rove_beetles_summary <- as.data.frame(rbind(MST_rove_beetles_A, MST_rove_beetles_B, MST_rove_beetles_C, MST_rove_beetles_D,
                                                MST_rove_beetles_E, MST_rove_beetles_F, MST_rove_beetles_LF1, MST_rove_beetles_LF2, 
                                                MST_rove_beetles_LF3, MST_rove_beetles_LFE, MST_rove_beetles_VJR, MST_rove_beetles_OG1,
                                                MST_rove_beetles_OG2, MST_rove_beetles_OG3))
MST_rove_beetles_summary 

colnames(MST_rove_beetles_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_rove_beetles_summary) = 1:14


MST_rove_beetles_summary$mean <- as.numeric(MST_rove_beetles_summary$mean)
MST_rove_beetles_summary$lower.95.quant <- as.numeric(MST_rove_beetles_summary$lower.95.quant)
MST_rove_beetles_summary$upper.95.quant <- as.numeric(MST_rove_beetles_summary$upper.95.quant)

MST_rove_beetles_summary <- left_join(MST_rove_beetles_summary, ACD_rove_beetles_summary, by = "block")

MST_rove_beetles_summary$range <- MST_rove_beetles_summary$upper.95.quant - MST_rove_beetles_summary$lower.95.quant

mean(MST_rove_beetles_summary $ mean)

write.csv(MST_rove_beetles_summary, file = "Results/MST_rove_beetles_summary.csv")


##### NTP - Neutral taxa percentage #####

rove_beetles_composition_matrix <- as.data.frame(rove_beetles_composition_matrix)
str(rove_beetles_composition_matrix)

# Fit Sloan's neutral model
SNM_rove_beetles <- iCAMP::snm.comm(comm = rove_beetles_composition_matrix, treat = Sites_rove_beetles)
SNM_rove_beetles$stats

NTP_rove_beetles_data <- SNM_rove_beetles$ratio.summary  %>% filter(index == "mean")
NTP_rove_beetles_data <- NTP_rove_beetles_data  %>% dplyr :: select(index, treatment.id, Neutral.wt)

NTP_rove_beetles_data <- NTP_rove_beetles_data %>% split(NTP_rove_beetles_data$treatment.id)


NTP_rove_beetles_A <- c('A', NTP_rove_beetles_data$`A`$Neutral.wt, 
                        quantile(SNM_rove_beetles$boot.detail$block$'A'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_rove_beetles$boot.detail$block$'A'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_B <- c('B', NTP_rove_beetles_data$`B`$Neutral.wt, 
                        quantile(SNM_rove_beetles$boot.detail$block$'B'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_rove_beetles$boot.detail$block$'B'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_C <- c('C', NTP_rove_beetles_data$`C`$Neutral.wt, 
                        quantile(SNM_rove_beetles$boot.detail$block$'C'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_rove_beetles$boot.detail$block$'C'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_D <- c('D', NTP_rove_beetles_data$`D`$Neutral.wt, 
                        quantile(SNM_rove_beetles$boot.detail$block$'D'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_rove_beetles$boot.detail$block$'D'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_E <- c('E', NTP_rove_beetles_data$`E`$Neutral.wt, 
                        quantile(SNM_rove_beetles$boot.detail$block$'E'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_rove_beetles$boot.detail$block$'E'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_F <- c('F', NTP_rove_beetles_data$`F`$Neutral.wt, 
                        quantile(SNM_rove_beetles$boot.detail$block$'F'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_rove_beetles$boot.detail$block$'F'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_LF1 <- c('LF2', NTP_rove_beetles_data$`LF1`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'LF1'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'LF1'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_LF2 <- c('LF2', NTP_rove_beetles_data$`LF2`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'LF2'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'LF2'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_LF3 <- c('LF3', NTP_rove_beetles_data$`LF3`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'LF3'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'LF3'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_LFE <- c('LFE', NTP_rove_beetles_data$`LFE`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'LFE'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'LFE'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_VJR <- c('VJR', NTP_rove_beetles_data$`VJR`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'VJR'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'VJR'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_OG1 <- c('OG1', NTP_rove_beetles_data$`OG1`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'OG1'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'OG1'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_OG2 <- c('OG2', NTP_rove_beetles_data$`OG2`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'OG2'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'OG2'$Neutral.wt, probs = 0.975))
NTP_rove_beetles_OG3 <- c('OG3', NTP_rove_beetles_data$`OG3`$Neutral.wt, 
                          quantile(SNM_rove_beetles$boot.detail$block$'OG3'$Neutral.wt, probs = 0.025), 
                          quantile(SNM_rove_beetles$boot.detail$block$'OG3'$Neutral.wt, probs = 0.975))

NTP_rove_beetles_summary <- as.data.frame(rbind(NTP_rove_beetles_A, NTP_rove_beetles_B, NTP_rove_beetles_C, NTP_rove_beetles_D,
                                                NTP_rove_beetles_E, NTP_rove_beetles_F, NTP_rove_beetles_LF1, NTP_rove_beetles_LF2, 
                                                NTP_rove_beetles_LF3, NTP_rove_beetles_LFE, NTP_rove_beetles_VJR, NTP_rove_beetles_OG1, 
                                                NTP_rove_beetles_OG2, NTP_rove_beetles_OG3))

NTP_rove_beetles_summary


# Rename column and row headings
colnames(NTP_rove_beetles_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NTP_rove_beetles_summary) = 1:14

# Add mean ACD
NTP_rove_beetles_summary <- left_join(NTP_rove_beetles_summary, ACD_rove_beetles_summary, by = "block")

str(NTP_rove_beetles_summary)
NTP_rove_beetles_summary$mean <- as.numeric(NTP_rove_beetles_summary$mean)
NTP_rove_beetles_summary$lower.95.quant <- as.numeric(NTP_rove_beetles_summary$lower.95.quant)
NTP_rove_beetles_summary$upper.95.quant <- as.numeric(NTP_rove_beetles_summary$upper.95.quant)


NTP_rove_beetles_summary$range <- NTP_rove_beetles_summary$upper.95.quant - NTP_rove_beetles_summary$lower.95.quant
NTP_rove_beetles_summary 

mean(NTP_rove_beetles_summary$mean)

write.csv(NTP_rove_beetles_summary, file = "Results/NTP_rove_beetles_summary.csv")


##### iCAMP - inferring community assembly mechanisms by phylogenetic bin-based null model analysis #####

# Phylogeny
beetles_taxa <- get_taxa(1323504)
beetles_phylo <- get_phylogeny(1323504)
rove_beetles_tips <-  intersect(beetles_phylo[["tip.labels"]], colnames(rove_beetles_composition_matrix))
rove_beetles_phylo <- ape::keep.tip(beetles_phylo, rove_beetles_tips)
rove_beetles_phylo$tip.labels <- NULL
rove_beetles_phylo$node.labels <- NULL
str(rove_beetles_phylo)
rove_beetles_phylo

# Root the tree
rove_beetles_phylo_rooted <- phytools :: midpoint.root(rove_beetles_phylo)
rove_beetles_phylo_rooted

save.wd = "iCAMP outputs/Rove beetles iCAMP outputs_repeat"

library(iCAMP)
# Phylogenetic distance matrix
pd.rove_beetles = pdist.big(tree = rove_beetles_phylo_rooted, wd=getwd(), nworker = 8, memory.G = 500)
pd.rove_beetles

# iCAMP
iCAMP_rove_beetles = icamp.big(comm=rove_beetles_composition_matrix, pd.desc = pd.rove_beetles$pd.file, pd.spname=pd.rove_beetles$tip.label,
                       pd.wd = save.wd, rand = 500, tree=rove_beetles_phylo_rooted,
                       prefix = "Rove beetles", ds = 0.2, pd.cut = NA, sp.check = TRUE,
                       phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                       phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                       nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                       qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                       correct.special = TRUE, unit.sum = rowSums(rove_beetles_composition_matrix), special.method = "depend",
                       ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)


# Calculate mean of each process in each sampling block 
iCAMP_rove_beetles_processes <- as.data.frame(iCAMP_rove_beetles$detail$processes)

colnames(iCAMP_rove_beetles_processes)
colnames(iCAMP_rove_beetles_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')

colMeans(iCAMP_rove_beetles_processes[3:7])

iCAMP_rove_beetles_processes <- tidyr::separate(iCAMP_rove_beetles_processes, sample2, into = c("block", "num")) 
iCAMP_rove_beetles_processes

#### Removing NAs
iCAMP_rove_beetles_processes <- na.omit(iCAMP_rove_beetles_processes)

library(dplyr)
iCAMP_rove_beetles_processes_summary <- as.data.frame(iCAMP_rove_beetles_processes %>% group_by(block) %>% summarise(mean_HeS = mean(HeS),
                                                                                                                     mean_HoS = mean(HoS), 
                                                                                                                     mean_DL = mean(DL),
                                                                                                                     mean_HoD = mean(HoD),
                                                                                                                     mean_Dr = mean(Dr)))

iCAMP_rove_beetles_processes_summary

colMeans(iCAMP_rove_beetles_processes_summary[2:6])

# Join with log ACD 
iCAMP_rove_beetles_processes_summary <- left_join(iCAMP_rove_beetles_processes_summary, ACD_rove_beetles_summary, by = 'block')
iCAMP_rove_beetles_processes_summary

write.csv(iCAMP_rove_beetles_processes_summary, file = "Results/iCAMP_rove_beetles_processes_summary.csv")




## Phylogenetic bins
iCAMP_rove_beetles$detail$taxabin$state.united # the row numbering is the final bin ID, the 1st column is orginal bin IDs, the 2nd column is the taxa number in each final bin, the 3rd to 5th columns show the maximum, mean, and standard deviation of phylogenetic distances within each final bin
iCAMP_rove_beetles$detail$taxabin$sp.bin # shows which species are in each bin

## Plot tree and show bins
ggtree(rove_beetles_phylo) +
  geom_tiplab(size = 2.9) +
  geom_nodelab(size = 2.9, nudge_x =-0.5, nudge_y = 1.2) +
  geom_strip('Ps/Br1', 'Ps/Br9', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('Medo1', 'Medo8', barsize = 2, color = 'chartreuse3', 
             label = 'Bin 3', offset = 1.6, offset.text = 0.1) +
  geom_strip('Edap1', 'Edap9', barsize = 2, color = 'purple', 
             label = 'Bin 4', offset = 1.6, offset.text = 0.1) +
  geom_strip('Copr1', 'Copr9', barsize = 2, color = 'orange2', 
             label = 'Bin 5', offset = 1.6, offset.text = 0.1) +
  geom_strip('Pino1', 'Pino9', barsize = 2, color = 'deeppink', 
             label = 'Bin 6', offset = 1.6, offset.text = 0.1) +
  geom_strip('Zyras quadriterminalis', 'Zyra1', barsize = 2, color = 'aquamarine3', 
             label = 'Bin 7', offset = 1.6, offset.text = 0.1) +
  geom_strip('Osor8', 'Anotylus uncifer', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  geom_strip('Drusilla trina', 'Drus1', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  xlim(0,4.5) +
  ggtitle("Rove beetles") +
  theme(plot.margin = unit(c(0.1,0.1,0.5,0.1), "cm"),
        plot.title = element_text(size = 15))

ggsave("RoveBeetlesTree.pdf", width = 15, height = 55, units = "cm")


#################################################################################################
######################################### Scarabs ###############################################
#################################################################################################

## Scarab abundance data collected by Adam Sharp et al. https://doi.org/10.5281/zenodo.1323504 

# Load the Scarab data
scarabs <- load_safe_data(1323504, 'Scarabs')

# Remove oil palm
scarabs <- scarabs[ grep("OP", scarabs$site, invert = TRUE) , ] 

# Construct community composition matrix
count <- scarabs %>% group_by(site) %>% add_count(taxon)
scarabs$Count <- count$n
scarabs <- as.data.frame(scarabs %>% group_by(site) %>% distinct(taxon, .keep_all= TRUE)) # Remove repetition

scarabs_composition_matrix <- create.matrix(scarabs,  tax.name = "taxon",  locality = "site", abund = TRUE, abund.col = "Count")
scarabs_composition_matrix <- t(scarabs_composition_matrix)

sum(colSums(scarabs_composition_matrix)) # number of individuals
ncol(scarabs_composition_matrix) # number of species
nrow(scarabs_composition_matrix) # number of sites

## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
# Select only sites that are in scarabs_composition_matrix
ACD_scarabs <- subset(ACD_all, ACD_all$ID %in% rownames(scarabs_composition_matrix))

# Calculate mean ACD
ACD_scarabs <- separate(ACD_scarabs, ID, into = c("block", "num"), remove = FALSE)
ACD_scarabs <- as.data.frame(ACD_scarabs %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_scarabs_summary <- as.data.frame(ACD_scarabs %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))

# Just sampling block names to be used for analysis
Sites_scarabs <- subset(ACD_scarabs, select = c(ID, block))
rownames(Sites_scarabs) <- Sites_scarabs[, 1]
Sites_scarabs <- subset(Sites_scarabs, select = block)

##### NST - normalised stochasticity ratio #####
NST_scarabs <- tNST(scarabs_composition_matrix, Sites_scarabs, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)
NST_scarabs$index.grp
mean(NST_scarabs$index.grp$NST.i.ruzicka)

NST_scarabs_summary <- subset(NST_scarabs$index.grp, select = c(group, NST.i.ruzicka))
NST_scarabs_summary <- NST_scarabs_summary %>% split(NST_scarabs_summary$group) # Split so you can separately index each sampling block


# Bootstrapping
NST_scarabs_boot <- nst.boot(NST_scarabs, out.detail = TRUE, nworker = 2)
NST_scarabs_boot

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw
NST_scarabs_boot$detail
NST_scarabs_A <- c('A', NST_scarabs_summary$'A'$NST.i.ruzicka, 
                   quantile(NST_scarabs_boot$detail$NST.boot$'A', probs = 0.025), 
                   quantile(NST_scarabs_boot$detail$NST.boot$'A', probs = 0.975))
NST_scarabs_B <- c('B', NST_scarabs_summary$'B'$NST.i.ruzicka, 
                   quantile(NST_scarabs_boot$detail$NST.boot$'B', probs = 0.025), 
                   quantile(NST_scarabs_boot$detail$NST.boot$'B', probs = 0.975))
NST_scarabs_C <- c('C', NST_scarabs_summary$'C'$NST.i.ruzicka, 
                   quantile(NST_scarabs_boot$detail$NST.boot$'C', probs = 0.025), 
                   quantile(NST_scarabs_boot$detail$NST.boot$'C', probs = 0.975))
NST_scarabs_D <- c('D', NST_scarabs_summary$'D'$NST.i.ruzicka, 
                   quantile(NST_scarabs_boot$detail$NST.boot$'D', probs = 0.025), 
                   quantile(NST_scarabs_boot$detail$NST.boot$'D', probs = 0.975))
NST_scarabs_E <- c('E', NST_scarabs_summary$'E'$NST.i.ruzicka, 
                   quantile(NST_scarabs_boot$detail$NST.boot$'E', probs = 0.025), 
                   quantile(NST_scarabs_boot$detail$NST.boot$'E', probs = 0.975))
NST_scarabs_F <- c('F', NST_scarabs_summary$'F'$NST.i.ruzicka, 
                   quantile(NST_scarabs_boot$detail$NST.boot$'F', probs = 0.025), 
                   quantile(NST_scarabs_boot$detail$NST.boot$'F', probs = 0.975))
NST_scarabs_LF1 <- c('LF1', NST_scarabs_summary$'LF1'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LF1', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LF1', probs = 0.975))
NST_scarabs_LF2 <- c('LF2', NST_scarabs_summary$'LF2'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LF2', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LF2', probs = 0.975))
NST_scarabs_LF3 <- c('LF3', NST_scarabs_summary$'LF3'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LF3', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LF3', probs = 0.975))
NST_scarabs_LFE <- c('LFE', NST_scarabs_summary$'LFE'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LFE', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'LFE', probs = 0.975))
NST_scarabs_VJR <- c('VJR', NST_scarabs_summary$'VJR'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'VJR', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'VJR', probs = 0.975))
NST_scarabs_OG1 <- c('OG1', NST_scarabs_summary$'OG1'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'OG1', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'OG1', probs = 0.975))
NST_scarabs_OG2 <- c('OG2', NST_scarabs_summary$'OG2'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'OG2', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'OG2', probs = 0.975))
NST_scarabs_OG3 <- c('OG3', NST_scarabs_summary$'OG3'$NST.i.ruzicka, 
                     quantile(NST_scarabs_boot$detail$NST.boot$'OG3', probs = 0.025), 
                     quantile(NST_scarabs_boot$detail$NST.boot$'OG3', probs = 0.975))

NST_scarabs_summary <- as.data.frame(rbind(NST_scarabs_A, NST_scarabs_B, NST_scarabs_C, NST_scarabs_D,
                                           NST_scarabs_E, NST_scarabs_F, NST_scarabs_LF1, NST_scarabs_LF2, 
                                           NST_scarabs_LF3, NST_scarabs_LFE, NST_scarabs_VJR, NST_scarabs_OG1,
                                           NST_scarabs_OG2, NST_scarabs_OG3))

colnames(NST_scarabs_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_scarabs_summary) = 1:14


NST_scarabs_summary$mean <- as.numeric(NST_scarabs_summary$mean)
NST_scarabs_summary$lower.95.quant <- as.numeric(NST_scarabs_summary$lower.95.quant)
NST_scarabs_summary$upper.95.quant <- as.numeric(NST_scarabs_summary$upper.95.quant)

NST_scarabs_summary <- left_join(NST_scarabs_summary, ACD_scarabs_summary, by = "block")

NST_scarabs_summary$range <- NST_scarabs_summary$upper.95.quant - NST_scarabs_summary$lower.95.quant

mean(NST_scarabs_summary$mean)

#REMOVE VJR has NST = 0
NST_scarabs_summary <- subset(NST_scarabs_summary, block != "VJR")



write.csv(NST_scarabs_summary, file = "Results/NST_scarabs_summary.csv")

##### MST - Modified Stochasticity ratio #####



MST_scarabs_summary <- subset(NST_scarabs$index.grp, select = c(group, MST.i.ruzicka))
MST_scarabs_summary <- MST_scarabs_summary %>% split(MST_scarabs_summary$group) # Split so you can separately index each sampling block

MST_scarabs_boot <- NST_scarabs_boot

MST_scarabs_A <- c('A', MST_scarabs_summary$'A'$MST.i.ruzicka, 
                   quantile(MST_scarabs_boot$detail$MST.boot$'A', probs = 0.025), 
                   quantile(MST_scarabs_boot$detail$MST.boot$'A', probs = 0.975))
MST_scarabs_B <- c('B', MST_scarabs_summary$'B'$MST.i.ruzicka, 
                   quantile(MST_scarabs_boot$detail$MST.boot$'B', probs = 0.025), 
                   quantile(MST_scarabs_boot$detail$MST.boot$'B', probs = 0.975))
MST_scarabs_C <- c('C', MST_scarabs_summary$'C'$MST.i.ruzicka, 
                   quantile(MST_scarabs_boot$detail$MST.boot$'C', probs = 0.025), 
                   quantile(MST_scarabs_boot$detail$MST.boot$'C', probs = 0.975))
MST_scarabs_D <- c('D', MST_scarabs_summary$'D'$MST.i.ruzicka, 
                   quantile(MST_scarabs_boot$detail$MST.boot$'D', probs = 0.025), 
                   quantile(MST_scarabs_boot$detail$MST.boot$'D', probs = 0.975))
MST_scarabs_E <- c('E', MST_scarabs_summary$'E'$MST.i.ruzicka, 
                   quantile(MST_scarabs_boot$detail$MST.boot$'E', probs = 0.025), 
                   quantile(MST_scarabs_boot$detail$MST.boot$'E', probs = 0.975))
MST_scarabs_F <- c('F', MST_scarabs_summary$'F'$MST.i.ruzicka, 
                   quantile(MST_scarabs_boot$detail$MST.boot$'F', probs = 0.025), 
                   quantile(MST_scarabs_boot$detail$MST.boot$'F', probs = 0.975))
MST_scarabs_LF1 <- c('LF1', MST_scarabs_summary$'LF1'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LF1', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LF1', probs = 0.975))
MST_scarabs_LF2 <- c('LF2', MST_scarabs_summary$'LF2'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LF2', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LF2', probs = 0.975))
MST_scarabs_LF3 <- c('LF3', MST_scarabs_summary$'LF3'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LF3', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LF3', probs = 0.975))
MST_scarabs_LFE <- c('LFE', MST_scarabs_summary$'LFE'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LFE', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'LFE', probs = 0.975))
MST_scarabs_VJR <- c('VJR', MST_scarabs_summary$'VJR'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'VJR', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'VJR', probs = 0.975))
MST_scarabs_OG1 <- c('OG1', MST_scarabs_summary$'OG1'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'OG1', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'OG1', probs = 0.975))
MST_scarabs_OG2 <- c('OG2', MST_scarabs_summary$'OG2'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'OG2', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'OG2', probs = 0.975))
MST_scarabs_OG3 <- c('OG3', MST_scarabs_summary$'OG3'$MST.i.ruzicka, 
                     quantile(MST_scarabs_boot$detail$MST.boot$'OG3', probs = 0.025), 
                     quantile(MST_scarabs_boot$detail$MST.boot$'OG3', probs = 0.975))

MST_scarabs_summary <- as.data.frame(rbind(MST_scarabs_A, MST_scarabs_B, MST_scarabs_C, MST_scarabs_D,
                                           MST_scarabs_E, MST_scarabs_F, MST_scarabs_LF1, MST_scarabs_LF2, 
                                           MST_scarabs_LF3, MST_scarabs_LFE, MST_scarabs_VJR, MST_scarabs_OG1,
                                           MST_scarabs_OG2, MST_scarabs_OG3))

colnames(MST_scarabs_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_scarabs_summary) = 1:14


MST_scarabs_summary$mean <- as.numeric(MST_scarabs_summary$mean)
MST_scarabs_summary$lower.95.quant <- as.numeric(MST_scarabs_summary$lower.95.quant)
MST_scarabs_summary$upper.95.quant <- as.numeric(MST_scarabs_summary$upper.95.quant)

MST_scarabs_summary <- left_join(MST_scarabs_summary, ACD_scarabs_summary, by = "block")

MST_scarabs_summary$range <- MST_scarabs_summary$upper.95.quant - MST_scarabs_summary$lower.95.quant

mean(MST_scarabs_summary$mean)

#REMOVE VJR has NST = 0
MST_scarabs_summary <- subset(MST_scarabs_summary, block != "VJR")



write.csv(MST_scarabs_summary, file = "Results/MST_scarabs_summary.csv")



##### iCAMP - inferring community assembly mechanisms by phylogenetic bin-based null model analysis #####

# Phylogeny
beetles_phylo <- safedata::get_phylogeny(1323504)
scarabs_tips <-  intersect(beetles_phylo[["tip.labels"]], colnames(scarabs_composition_matrix))
scarabs_phylo <- ape::keep.tip(beetles_phylo, scarabs_tips)
scarabs_phylo$tip.labels <- NULL
scarabs_phylo$node.labels <- NULL

# Root the tree
scarabs_phylo_rooted <- phytools::midpoint.root(scarabs_phylo)
scarabs_phylo_rooted


#  Phylogenetic distance matrix.
save.wd = "iCAMP outputs/Scarabs iCAMP outputs"


# Phylogenetic distance matrix
pd.scarabs = pdist.big(tree = scarabs_phylo_rooted, wd=save.wd, nworker = 8, memory.G = 500)

# iCAMP
iCAMP_scarabs =iCAMP::icamp.big(comm=scarabs_composition_matrix, pd.desc = pd.scarabs$pd.file, pd.spname=pd.scarabs$tip.label,
                             pd.wd = save.wd, rand = 500, tree=scarabs_phylo_rooted,
                             prefix = 'scarabs', ds = 0.2, pd.cut = NA, sp.check = TRUE,
                             phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                             phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                             nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                             qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                             correct.special = TRUE, unit.sum = rowSums(scarabs_composition_matrix), special.method = "depend",
                             ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)


# Calculate mean of each process in each sampling block 
iCAMP_scarabs_processes <- as.data.frame(iCAMP_scarabs$detail$processes)

colnames(iCAMP_scarabs_processes)
colMeans(iCAMP_scarabs_processes[3:7])

colnames(iCAMP_scarabs_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')


iCAMP_scarabs_processes <- separate(iCAMP_scarabs_processes, sample2, into = c("block", "num")) 

iCAMP_scarabs_processes_summary <- as.data.frame(iCAMP_scarabs_processes %>% group_by(block) %>% summarise(mean_HeS = mean(HeS),
                                                                                                           mean_HoS = mean(HoS), 
                                                                                                           mean_DL = mean(DL),
                                                                                                           mean_HoD = mean(HoD),
                                                                                                           mean_Dr = mean(Dr)))

colMeans(iCAMP_scarabs_processes_summary[2:6])

# Join with log ACD 
iCAMP_scarabs_processes_summary
ACD_scarabs_summary
iCAMP_scarabs_processes_summary <- left_join(iCAMP_scarabs_processes_summary, ACD_scarabs_summary, by = 'block')
iCAMP_scarabs_processes_summary

write.csv(iCAMP_scarabs_processes_summary, file = "Results/iCAMP_scarabs_processes_summary.csv")

## Phylogenetic bins

iCAMP_scarabs$detail$taxabin$state.united$bin.united.tax.num # number of taxa in each bin
iCAMP_scarabs$detail$taxabin$sp.bin # shows which species are in each bin

## Plot tree and show bins
ggtree(scarabs_phylo) +
  geom_tiplab(size = 3) +
  geom_nodelab(size = 3, nudge_x =-0.5, nudge_y = 0.5) +
  geom_strip('Proagoderus watanabei', 'Onthophagus wallacei', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('Mericserica oberthuri', 'Nematophylla carinicollis', barsize = 2, color = 'chartreuse3', 
             label = 'Bin 3', offset = 1.6, offset.text = 0.1) +
  geom_strip('Mala1', 'Maladera spissa', barsize = 2, color = 'chartreuse3', 
             label = 'Bin 3', offset = 1.6, offset.text = 0.1) +
  geom_strip('Apogonia buttikoferi', 'Apogonia sericea', barsize = 2, color = 'purple', 
             label = 'Bin 4', offset = 1.6, offset.text = 0.1) +
  geom_strip('Microphaeochroops varius', 'Madrasostes variolosum', barsize = 2, color = 'orange2', 
             label = 'Bin 5', offset = 1.6, offset.text = 0.1) +
  geom_strip('Aegus striatipennis', 'Pelopides monticulosus', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  xlim(0,5) +
  ggtitle("Scarabs") +
  theme(plot.margin = unit(c(0.1,0.1,0.5,0.1), "cm"),
        plot.title = element_text(size = 15))
ggsave("ScarabsTree.pdf", width = 15, height = 55, units = "cm")


##############################################################################################
###################################### Ants ##################################################
##############################################################################################

#### ANTS ####


# Ants abundance data collected by Tom Fayle et al. https://doi.org/10.5281/zenodo.3876227

# Load the Ants data
ants_composition_matrix <- load_safe_data(3876227, 'Ant_Attendance_Summary')

# Remove non-relevant columns
ants_composition_matrix <- subset(ants_composition_matrix, select = -c(Date, Block))

# Set site names as rownames
rownames(ants_composition_matrix) <- ants_composition_matrix[,1]
ants_composition_matrix <- ants_composition_matrix[, -1]

# Remove oil palm plantations
ants_composition_matrix <- ants_composition_matrix[ grep("OP", rownames(ants_composition_matrix), invert = TRUE) , ] 

# Remove taxa (columns) with an abundance of zero - these are taxa that were only found in oil palm plantations (the NTP analysis doesn't work if these taxa are included)
colSums(ants_composition_matrix)
ants_composition_matrix <- ants_composition_matrix[, which(colSums(ants_composition_matrix) != 0)]
colSums(ants_composition_matrix)

sum(colSums(ants_composition_matrix)) # number of individuals
ncol(ants_composition_matrix) # number of species
nrow(ants_composition_matrix) # number of sites

## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
# Select only sites that are in ants_composition_matrix
ACD_ants <- subset(ACD_all, ACD_all$ID %in% rownames(ants_composition_matrix))

# Calculate mean ACD
library(tidyr)
ACD_ants <- separate(ACD_ants, ID, into = c("block", "num"), remove = FALSE)
ACD_ants <- as.data.frame(ACD_ants %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_ants_summary <- as.data.frame(ACD_ants %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))

# Just sampling block names to be used for analysis
Sites_ants <- subset(ACD_ants, select = c(ID, block))
rownames(Sites_ants) <- Sites_ants[, 1]
Sites_ants <- subset(Sites_ants, select = block)

##### NST - normalised stochasticity ratio #####

NST_ants <- tNST(ants_composition_matrix, Sites_ants, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)

mean(NST_ants$index.grp$NST.i.ruzicka)

NST_ants_summary <- subset(NST_ants$index.grp, select = c(group, NST.i.ruzicka))

NST_ants_summary <- NST_ants_summary %>% split(NST_ants_summary$group) # Split so you can separately index each sampling block

# Bootstrapping
NST_ants_boot <- nst.boot(NST_ants, out.detail = TRUE, nworker = 2)
NST_ants_boot

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw
NST_ants_boot$detail

NST_ants_A <- c('A', NST_ants_summary$'A'$NST.i.ruzicka, 
                quantile(NST_ants_boot$detail$NST.boot$'A', probs = 0.025), 
                quantile(NST_ants_boot$detail$NST.boot$'A', probs = 0.975))
NST_ants_B <- c('B', NST_ants_summary$'B'$NST.i.ruzicka, 
                quantile(NST_ants_boot$detail$NST.boot$'B', probs = 0.025), 
                quantile(NST_ants_boot$detail$NST.boot$'B', probs = 0.975))
NST_ants_C <- c('C', NST_ants_summary$'C'$NST.i.ruzicka, 
                quantile(NST_ants_boot$detail$NST.boot$'C', probs = 0.025), 
                quantile(NST_ants_boot$detail$NST.boot$'C', probs = 0.975))
NST_ants_D <- c('D', NST_ants_summary$'D'$NST.i.ruzicka, 
                quantile(NST_ants_boot$detail$NST.boot$'D', probs = 0.025), 
                quantile(NST_ants_boot$detail$NST.boot$'D', probs = 0.975))
NST_ants_E <- c('E', NST_ants_summary$'E'$NST.i.ruzicka, 
                quantile(NST_ants_boot$detail$NST.boot$'E', probs = 0.025), 
                quantile(NST_ants_boot$detail$NST.boot$'E', probs = 0.975))
NST_ants_F <- c('F', NST_ants_summary$'F'$NST.i.ruzicka, 
                quantile(NST_ants_boot$detail$NST.boot$'F', probs = 0.025), 
                quantile(NST_ants_boot$detail$NST.boot$'F', probs = 0.975))
NST_ants_LF2 <- c('LF2', NST_ants_summary$'LF2'$NST.i.ruzicka, 
                  quantile(NST_ants_boot$detail$NST.boot$'LF2', probs = 0.025), 
                  quantile(NST_ants_boot$detail$NST.boot$'LF2', probs = 0.975))
NST_ants_LF3 <- c('LF3', NST_ants_summary$'LF3'$NST.i.ruzicka, 
                  quantile(NST_ants_boot$detail$NST.boot$'LF3', probs = 0.025), 
                  quantile(NST_ants_boot$detail$NST.boot$'LF3', probs = 0.975))
NST_ants_LFE <- c('LFE', NST_ants_summary$'LFE'$NST.i.ruzicka, 
                  quantile(NST_ants_boot$detail$NST.boot$'LFE', probs = 0.025), 
                  quantile(NST_ants_boot$detail$NST.boot$'LFE', probs = 0.975))
NST_ants_VJR <- c('VJR', NST_ants_summary$'VJR'$NST.i.ruzicka, 
                  quantile(NST_ants_boot$detail$NST.boot$'VJR', probs = 0.025), 
                  quantile(NST_ants_boot$detail$NST.boot$'VJR', probs = 0.975))
NST_ants_OG2 <- c('OG2', NST_ants_summary$'OG2'$NST.i.ruzicka, 
                  quantile(NST_ants_boot$detail$NST.boot$'OG2', probs = 0.025), 
                  quantile(NST_ants_boot$detail$NST.boot$'OG2', probs = 0.975))
NST_ants_OG3 <- c('OG3', NST_ants_summary$'OG3'$NST.i.ruzicka, 
                  quantile(NST_ants_boot$detail$NST.boot$'OG3', probs = 0.025), 
                  quantile(NST_ants_boot$detail$NST.boot$'OG3', probs = 0.975))


NST_ants_summary <- as.data.frame(rbind(NST_ants_A, NST_ants_B, NST_ants_C, NST_ants_D,
                                        NST_ants_E, NST_ants_F, NST_ants_LF2, 
                                        NST_ants_LF3, NST_ants_LFE, NST_ants_VJR, 
                                        NST_ants_OG2, NST_ants_OG3))

colnames(NST_ants_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_ants_summary) = 1:12

NST_ants_summary$mean <- as.numeric(NST_ants_summary$mean)
NST_ants_summary$lower.95.quant <- as.numeric(NST_ants_summary$lower.95.quant)
NST_ants_summary$upper.95.quant <- as.numeric(NST_ants_summary$upper.95.quant)

NST_ants_summary <- left_join(NST_ants_summary, ACD_ants_summary, by = "block")

NST_ants_summary$range <- NST_ants_summary$upper.95.quant - NST_ants_summary$lower.95.quant
NST_ants_summary

mean(NST_ants_summary$mean)

write.csv(NST_ants_summary, file = "NST_ants_summary.csv")


##### MST - Modified stochasticity ratio #####

MST_ants_summary <- subset(NST_ants$index.grp, select = c(group, MST.i.ruzicka))

MST_ants_summary <- MST_ants_summary %>% split(MST_ants_summary$group) # Split so you can separately index each sampling block

MST_ants_boot <- NST_ants_boot

MST_ants_A <- c('A', MST_ants_summary$'A'$MST.i.ruzicka, 
                quantile(MST_ants_boot$detail$MST.boot$'A', probs = 0.025), 
                quantile(MST_ants_boot$detail$MST.boot$'A', probs = 0.975))
MST_ants_B <- c('B', MST_ants_summary$'B'$MST.i.ruzicka, 
                quantile(MST_ants_boot$detail$MST.boot$'B', probs = 0.025), 
                quantile(MST_ants_boot$detail$MST.boot$'B', probs = 0.975))
MST_ants_C <- c('C', MST_ants_summary$'C'$MST.i.ruzicka, 
                quantile(MST_ants_boot$detail$MST.boot$'C', probs = 0.025), 
                quantile(MST_ants_boot$detail$MST.boot$'C', probs = 0.975))
MST_ants_D <- c('D', MST_ants_summary$'D'$MST.i.ruzicka, 
                quantile(MST_ants_boot$detail$MST.boot$'D', probs = 0.025), 
                quantile(MST_ants_boot$detail$MST.boot$'D', probs = 0.975))
MST_ants_E <- c('E', MST_ants_summary$'E'$MST.i.ruzicka, 
                quantile(MST_ants_boot$detail$MST.boot$'E', probs = 0.025), 
                quantile(MST_ants_boot$detail$MST.boot$'E', probs = 0.975))
MST_ants_F <- c('F', MST_ants_summary$'F'$MST.i.ruzicka, 
                quantile(MST_ants_boot$detail$MST.boot$'F', probs = 0.025), 
                quantile(MST_ants_boot$detail$MST.boot$'F', probs = 0.975))
MST_ants_LF2 <- c('LF2', MST_ants_summary$'LF2'$MST.i.ruzicka, 
                  quantile(MST_ants_boot$detail$MST.boot$'LF2', probs = 0.025), 
                  quantile(MST_ants_boot$detail$MST.boot$'LF2', probs = 0.975))
MST_ants_LF3 <- c('LF3', MST_ants_summary$'LF3'$MST.i.ruzicka, 
                  quantile(MST_ants_boot$detail$MST.boot$'LF3', probs = 0.025), 
                  quantile(MST_ants_boot$detail$MST.boot$'LF3', probs = 0.975))
MST_ants_LFE <- c('LFE', MST_ants_summary$'LFE'$MST.i.ruzicka, 
                  quantile(MST_ants_boot$detail$MST.boot$'LFE', probs = 0.025), 
                  quantile(MST_ants_boot$detail$MST.boot$'LFE', probs = 0.975))
MST_ants_VJR <- c('VJR', MST_ants_summary$'VJR'$MST.i.ruzicka, 
                  quantile(MST_ants_boot$detail$MST.boot$'VJR', probs = 0.025), 
                  quantile(MST_ants_boot$detail$MST.boot$'VJR', probs = 0.975))
MST_ants_OG2 <- c('OG2', MST_ants_summary$'OG2'$MST.i.ruzicka, 
                  quantile(MST_ants_boot$detail$MST.boot$'OG2', probs = 0.025), 
                  quantile(MST_ants_boot$detail$MST.boot$'OG2', probs = 0.975))
MST_ants_OG3 <- c('OG3', MST_ants_summary$'OG3'$MST.i.ruzicka, 
                  quantile(MST_ants_boot$detail$MST.boot$'OG3', probs = 0.025), 
                  quantile(MST_ants_boot$detail$MST.boot$'OG3', probs = 0.975))


MST_ants_summary <- as.data.frame(rbind(MST_ants_A, MST_ants_B, MST_ants_C, MST_ants_D,
                                        MST_ants_E, MST_ants_F, MST_ants_LF2, 
                                        MST_ants_LF3, MST_ants_LFE, MST_ants_VJR, 
                                        MST_ants_OG2, MST_ants_OG3))

colnames(MST_ants_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_ants_summary) = 1:12

MST_ants_summary$mean <- as.numeric(MST_ants_summary$mean)
MST_ants_summary$lower.95.quant <- as.numeric(MST_ants_summary$lower.95.quant)
MST_ants_summary$upper.95.quant <- as.numeric(MST_ants_summary$upper.95.quant)

MST_ants_summary <- left_join(MST_ants_summary, ACD_ants_summary, by = "block")

MST_ants_summary$range <- MST_ants_summary$upper.95.quant - MST_ants_summary$lower.95.quant
MST_ants_summary

mean(MST_ants_summary$mean)

write.csv(MST_ants_summary, file = "Results/MST_ants_summary.csv")



##### NTP - Neutral taxa percentage #####

ants_composition_matrix <- as.data.frame(ants_composition_matrix)

SNM_ants <- snm.comm(comm = ants_composition_matrix, treat = Sites_ants)
SNM_ants$stats

NTP_ants_data <- SNM_ants$ratio.summary  %>% filter(index == "mean")
NTP_ants_data <- NTP_ants_data  %>% dplyr :: select(index, treatment.id, Neutral.wt)

NTP_ants_data <- NTP_ants_data %>% split(NTP_ants_data$treatment.id)

NTP_ants_A <- c('A', NTP_ants_data$`A`$Neutral.wt, 
                quantile(SNM_ants$boot.detail$block$'A'$Neutral.wt, probs = 0.025), 
                quantile(SNM_ants$boot.detail$block$'A'$Neutral.wt, probs = 0.975))
NTP_ants_B <- c('B', NTP_ants_data$`B`$Neutral.wt, 
                quantile(SNM_ants$boot.detail$block$'B'$Neutral.wt, probs = 0.025), 
                quantile(SNM_ants$boot.detail$block$'B'$Neutral.wt, probs = 0.975))
NTP_ants_C <- c('C', NTP_ants_data$`C`$Neutral.wt, 
                quantile(SNM_ants$boot.detail$block$'C'$Neutral.wt, probs = 0.025), 
                quantile(SNM_ants$boot.detail$block$'C'$Neutral.wt, probs = 0.975))
NTP_ants_D <- c('D', NTP_ants_data$`D`$Neutral.wt, 
                quantile(SNM_ants$boot.detail$block$'D'$Neutral.wt, probs = 0.025), 
                quantile(SNM_ants$boot.detail$block$'D'$Neutral.wt, probs = 0.975))
NTP_ants_E <- c('E', NTP_ants_data$`E`$Neutral.wt, 
                quantile(SNM_ants$boot.detail$block$'E'$Neutral.wt, probs = 0.025), 
                quantile(SNM_ants$boot.detail$block$'E'$Neutral.wt, probs = 0.975))
NTP_ants_F <- c('F', NTP_ants_data$`F`$Neutral.wt, 
                quantile(SNM_ants$boot.detail$block$'F'$Neutral.wt, probs = 0.025), 
                quantile(SNM_ants$boot.detail$block$'F'$Neutral.wt, probs = 0.975))
NTP_ants_LF2 <- c('LF2', NTP_ants_data$`LF2`$Neutral.wt, 
                  quantile(SNM_ants$boot.detail$block$'LF2'$Neutral.wt, probs = 0.025), 
                  quantile(SNM_ants$boot.detail$block$'LF2'$Neutral.wt, probs = 0.975))
NTP_ants_LF3 <- c('LF3', NTP_ants_data$`LF3`$Neutral.wt, 
                  quantile(SNM_ants$boot.detail$block$'LF3'$Neutral.wt, probs = 0.025), 
                  quantile(SNM_ants$boot.detail$block$'LF3'$Neutral.wt, probs = 0.975))
NTP_ants_LFE <- c('LFE', NTP_ants_data$`LFE`$Neutral.wt, 
                  quantile(SNM_ants$boot.detail$block$'LFE'$Neutral.wt, probs = 0.025), 
                  quantile(SNM_ants$boot.detail$block$'LFE'$Neutral.wt, probs = 0.975))
NTP_ants_VJR <- c('VJR', NTP_ants_data$`VJR`$Neutral.wt, 
                  quantile(SNM_ants$boot.detail$block$'VJR'$Neutral.wt, probs = 0.025), 
                  quantile(SNM_ants$boot.detail$block$'VJR'$Neutral.wt, probs = 0.975))
NTP_ants_OG2 <- c('OG2', NTP_ants_data$`OG2`$Neutral.wt, 
                  quantile(SNM_ants$boot.detail$block$'OG2'$Neutral.wt, probs = 0.025), 
                  quantile(SNM_ants$boot.detail$block$'OG2'$Neutral.wt, probs = 0.975))
NTP_ants_OG3 <- c('OG3', NTP_ants_data$`OG3`$Neutral.wt, 
                  quantile(SNM_ants$boot.detail$block$'OG3'$Neutral.wt, probs = 0.025), 
                  quantile(SNM_ants$boot.detail$block$'OG3'$Neutral.wt, probs = 0.975))

NTP_ants_summary <- as.data.frame(rbind(NTP_ants_A, NTP_ants_B, NTP_ants_C, NTP_ants_D,
                                        NTP_ants_E, NTP_ants_F, NTP_ants_LF2, 
                                        NTP_ants_LF3, NTP_ants_LFE, NTP_ants_VJR, 
                                        NTP_ants_OG2, NTP_ants_OG3))

NTP_ants_summary


# Rename column and row headings
colnames(NTP_ants_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NTP_ants_summary) = 1:12

# Add mean ACD
NTP_ants_summary <- left_join(NTP_ants_summary, ACD_ants_summary, by = "block")


str(NTP_ants_summary)
NTP_ants_summary$mean <- as.numeric(NTP_ants_summary$mean)
NTP_ants_summary$lower.95.quant <- as.numeric(NTP_ants_summary$lower.95.quant)
NTP_ants_summary$upper.95.quant <- as.numeric(NTP_ants_summary$upper.95.quant)



NTP_ants_summary$range <- NTP_ants_summary$upper.95.quant - NTP_ants_summary$lower.95.quant

mean(NTP_ants_summary$mean)

write.csv(NTP_ants_summary, file = "Results/NTP_ants_summary.csv")


##### iCAMP - inferring community assembly mechanisms by phylogenetic bin-based null model analysis #####

# Phylogeny
ants_phylo <- get_phylogeny(3876227)
ants_tips <-  intersect(ants_phylo[["tip.labels"]], colnames(ants_composition_matrix))
ants_phylo <- ape::keep.tip(ants_phylo, ants_tips)
ants_phylo$tip.labels <- NULL
ants_phylo$node.labels <- NULL

# Root the tree
ants_phylo_rooted <- phytools :: midpoint.root(ants_phylo)

#  Phylogenetic distance matrix.
save.wd = "iCAMP outputs/Ants iCAMP outputs"

# Phylogenetic distance matrix
pd.ants = pdist.big(tree = ants_phylo_rooted, wd=save.wd, nworker = 8, memory.G = 500)

# iCAMP
iCAMP_ants =iCAMP::icamp.big(comm=ants_composition_matrix, pd.desc = pd.ants$pd.file, pd.spname=pd.ants$tip.label,
                                   pd.wd = save.wd, rand = 500, tree=ants_phylo_rooted,
                                   prefix = 'ants', ds = 0.2, pd.cut = NA, sp.check = TRUE,
                                   phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                                   phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                                   nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                                   qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                                   correct.special = TRUE, unit.sum = rowSums(ants_composition_matrix), special.method = "depend",
                                   ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)
iCAMP_ants

## Calculate mean of each process in each sampling block
iCAMP_ants_processes <- as.data.frame(iCAMP_ants$detail$processes)

colnames(iCAMP_ants_processes)
colnames(iCAMP_ants_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')

iCAMP_ants_processes <- tidyr::separate(iCAMP_ants_processes, sample2, into = c("block", "num")) 

#iCAMP_ants_processes_summary <- as.data.frame(iCAMP_ants_processes %>% group_by(block) %>% summarise('Heterogeneous selection' = mean(HeS),
                                                                                                     'Homogeneous selection' = mean(HoS), 
                                                                                                   'Dispersal limitation' = mean(DL),
                                                                                                   'Homogenizing dispersal'= mean(HoD),
                                                                                                  'Drift' = mean(Dr)))

iCAMP_ants_processes_summary <- as.data.frame(iCAMP_ants_processes %>% group_by(block) %>% 
                  summarise('mean_HeS' = mean(HeS),
                            'mean_HoS' = mean(HoS), 
                            'mean_DL' = mean(DL),
                            'mean_HoD'= mean(HoD),
                            'mean_Dr' = mean(Dr)))

#Join with log ACD
iCAMP_ants_processes_summary <- left_join(iCAMP_ants_processes_summary, ACD_ants_summary, by = 'block')

write.csv(iCAMP_ants_summary, file = "Results/iCAMP_ants_summary.csv")

## Phylogenetic bins
iCAMP_ants$detail$taxabin$state.united$bin.united.tax.num # number of taxa in each bin
iCAMP_ants$detail$taxabin$sp.bin # shows which species are in each bin

## Plot tree and show bins
ggtree(ants_phylo) +
  geom_tiplab(size = 2.8) +
  geom_nodelab(size = 2.9, nudge_x =-0.5, nudge_y = 1.2) +
  geom_strip('sp_18', 'sp_220', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('sp_22', 'sp_181', barsize = 2, color = 'chartreuse3', 
             label = 'Bin 3', offset = 1.6, offset.text = 0.1) +
  geom_strip('sp_31', 'sp_210', barsize = 2, color = 'purple', 
             label = 'Bin 4', offset = 1.6, offset.text = 0.1) +
  geom_strip('sp_10', 'sp_206', barsize = 2, color = 'orange2', 
             label = 'Bin 5', offset = 1.6, offset.text = 0.1) +
  geom_strip('sp_23', 'sp_201', barsize = 2, color = 'deeppink', 
             label = 'Bin 6', offset = 1.6, offset.text = 0.1) +
  geom_strip('sp_204', 'unid_sp_1', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  xlim(0,5) +
  ggtitle("Ants") +
  theme(plot.margin = unit(c(2,0.1,0.5,0.1), "cm"),
        plot.title = element_text(size = 15))

ggsave("AntsTree.pdf", width = 15, height = 57, units = "cm")



#########################################################################################################
################################### Orthoptera ##########################################################
#########################################################################################################

## Orthoptera abundance data collected by Jane Hardwick et al. https://doi.org/10.5281/zenodo.7011354
orthoptera_composition_matrix <- load_safe_data(7011354, 'OrthopteraAssem')

orthoptera_composition_matrix <- subset(orthoptera_composition_matrix, select = -c( Date1, Date2, Type, Collector)) 
rownames(orthoptera_composition_matrix) <- orthoptera_composition_matrix[, 1] #Set rownames as first column (site names)
orthoptera_composition_matrix <- orthoptera_composition_matrix[, -1] # Remove first column

# Remove oil palm plantations
orthoptera_composition_matrix <- orthoptera_composition_matrix[ grep("OP", rownames(orthoptera_composition_matrix), invert = TRUE) , ]

# Remove taxa (columns) with an abundance of zero - these are taxa that were only found in oil palm plantations (the NTP analysis doesn't work if these taxa are included)
orthoptera_composition_matrix <- orthoptera_composition_matrix[, which(colSums(orthoptera_composition_matrix) != 0)]

# Remove the word 'count' from morphospecies names
colnames(orthoptera_composition_matrix) <- gsub("_count", "", colnames(orthoptera_composition_matrix))

## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
# Select only sites that are in orthoptera_composition_matrix
ACD_orthoptera <- subset(ACD_all, ACD_all$ID %in% rownames(orthoptera_composition_matrix))

# Calculate mean ACD
library(tidyr)
ACD_orthoptera <- separate(ACD_orthoptera, ID, into = c("block", "num"), remove = FALSE)
library(dplyr)
ACD_orthoptera <- as.data.frame(ACD_orthoptera %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_orthoptera_summary <- as.data.frame(ACD_orthoptera %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))
ACD_orthoptera_summary 

# Just sampling block names to be used for analysis
Sites_orthoptera <- subset(ACD_orthoptera, select = c(ID, block))
rownames(Sites_orthoptera) <- Sites_orthoptera[, 1]
Sites_orthoptera <- subset(Sites_orthoptera, select = block)
Sites_orthoptera


##### NST - normalised stochasticity ratio #####
NST_orthoptera <- tNST(orthoptera_composition_matrix, Sites_orthoptera, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)
mean(NST_orthoptera$index.grp$NST.i.ruzicka)

NST_orthoptera_summary <- subset(NST_orthoptera$index.grp, select = c(group, NST.i.ruzicka))
NST_orthoptera_summary <- NST_orthoptera_summary %>% split(NST_orthoptera_summary$group) # Split so you can separately index each sampling block
NST_orthoptera_summary

# Bootstrapping
NST_orthoptera_boot <- nst.boot(NST_orthoptera, out.detail = TRUE, nworker = 2)
NST_orthoptera_boot

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw
NST_orthoptera_boot$detail

NST_orthoptera_B <- c('B', NST_orthoptera_summary$'B'$NST.i.ruzicka, 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'B', probs = 0.025), 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'B', probs = 0.975))
NST_orthoptera_C <- c('C', NST_orthoptera_summary$'C'$NST.i.ruzicka, 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'C', probs = 0.025), 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'C', probs = 0.975))
NST_orthoptera_D <- c('D', NST_orthoptera_summary$'D'$NST.i.ruzicka, 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'D', probs = 0.025), 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'D', probs = 0.975))
NST_orthoptera_F <- c('F', NST_orthoptera_summary$'F'$NST.i.ruzicka, 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'F', probs = 0.025), 
                      quantile(NST_orthoptera_boot$detail$NST.boot$'F', probs = 0.975))
NST_orthoptera_OG2 <- c('OG2', NST_orthoptera_summary$'OG2'$NST.i.ruzicka, 
                        quantile(NST_orthoptera_boot$detail$NST.boot$'OG2', probs = 0.025), 
                        quantile(NST_orthoptera_boot$detail$NST.boot$'OG2', probs = 0.975))
NST_orthoptera_OG3 <- c('OG3', NST_orthoptera_summary$'OG3'$NST.i.ruzicka, 
                        quantile(NST_orthoptera_boot$detail$NST.boot$'OG3', probs = 0.025), 
                        quantile(NST_orthoptera_boot$detail$NST.boot$'OG3', probs = 0.975))


NST_orthoptera_summary <- as.data.frame(rbind(NST_orthoptera_B, NST_orthoptera_C, NST_orthoptera_D,
                                              NST_orthoptera_F,
                                              NST_orthoptera_OG2, NST_orthoptera_OG3))

colnames(NST_orthoptera_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_orthoptera_summary) = 1:6

NST_orthoptera_summary$mean <- as.numeric(NST_orthoptera_summary$mean)
NST_orthoptera_summary$lower.95.quant <- as.numeric(NST_orthoptera_summary$lower.95.quant)
NST_orthoptera_summary$upper.95.quant <- as.numeric(NST_orthoptera_summary$upper.95.quant)

NST_orthoptera_summary <- left_join(NST_orthoptera_summary, ACD_orthoptera_summary, by = "block")

NST_orthoptera_summary$range <- NST_orthoptera_summary$upper.95.quant - NST_orthoptera_summary$lower.95.quant
NST_orthoptera_summary

write.csv(NST_orthoptera_summary, file = "Results/NST_orthoptera_summary.csv")


MST_orthoptera_summary <- subset(NST_orthoptera$index.grp, select = c(group, MST.i.ruzicka))
MST_orthoptera_summary <- MST_orthoptera_summary %>% split(MST_orthoptera_summary$group) # Split so you can separately index each sampling block
MST_orthoptera_summary

MST_orthoptera_boot <- NST_orthoptera_boot

MST_orthoptera_B <- c('B', MST_orthoptera_summary$'B'$MST.i.ruzicka, 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'B', probs = 0.025), 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'B', probs = 0.975))
MST_orthoptera_C <- c('C', MST_orthoptera_summary$'C'$MST.i.ruzicka, 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'C', probs = 0.025), 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'C', probs = 0.975))
MST_orthoptera_D <- c('D', MST_orthoptera_summary$'D'$MST.i.ruzicka, 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'D', probs = 0.025), 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'D', probs = 0.975))
MST_orthoptera_F <- c('F', MST_orthoptera_summary$'F'$MST.i.ruzicka, 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'F', probs = 0.025), 
                      quantile(MST_orthoptera_boot$detail$MST.boot$'F', probs = 0.975))
MST_orthoptera_OG2 <- c('OG2', MST_orthoptera_summary$'OG2'$MST.i.ruzicka, 
                        quantile(MST_orthoptera_boot$detail$MST.boot$'OG2', probs = 0.025), 
                        quantile(MST_orthoptera_boot$detail$MST.boot$'OG2', probs = 0.975))
MST_orthoptera_OG3 <- c('OG3', MST_orthoptera_summary$'OG3'$MST.i.ruzicka, 
                        quantile(MST_orthoptera_boot$detail$MST.boot$'OG3', probs = 0.025), 
                        quantile(MST_orthoptera_boot$detail$MST.boot$'OG3', probs = 0.975))


MST_orthoptera_summary <- as.data.frame(rbind(MST_orthoptera_B, MST_orthoptera_C, MST_orthoptera_D,
                                              MST_orthoptera_F,
                                              MST_orthoptera_OG2, MST_orthoptera_OG3))

colnames(MST_orthoptera_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_orthoptera_summary) = 1:6

MST_orthoptera_summary$mean <- as.numeric(MST_orthoptera_summary$mean)
MST_orthoptera_summary$lower.95.quant <- as.numeric(MST_orthoptera_summary$lower.95.quant)
MST_orthoptera_summary$upper.95.quant <- as.numeric(MST_orthoptera_summary$upper.95.quant)

MST_orthoptera_summary <- left_join(MST_orthoptera_summary, ACD_orthoptera_summary, by = "block")

MST_orthoptera_summary$range <- MST_orthoptera_summary$upper.95.quant - MST_orthoptera_summary$lower.95.quant
MST_orthoptera_summary

write.csv(MST_orthoptera_summary, file = "Results/MST_orthoptera_summary.csv")


##### NTP - Neutral taxa percentage #####

orthoptera_composition_matrix <- as.data.frame(orthoptera_composition_matrix)

# Fit Sloan's neutral model
SNM_orthoptera <- snm.comm(comm = orthoptera_composition_matrix, treat = Sites_orthoptera)
NTP_orthoptera_data <- SNM_orthoptera$ratio.summary  %>% filter(index == "mean")
NTP_orthoptera_data <- NTP_orthoptera_data  %>% dplyr :: select(index, treatment.id, Neutral.wt)

NTP_orthoptera_data <- NTP_orthoptera_data %>% split(NTP_orthoptera_data$treatment.id)

NTP_orthoptera_B <- c('B', NTP_orthoptera_data$`B`$Neutral.wt, 
                      quantile(SNM_orthoptera$boot.detail$block$'B'$Neutral.wt, probs = 0.025), 
                      quantile(SNM_orthoptera$boot.detail$block$'B'$Neutral.wt, probs = 0.975))
NTP_orthoptera_C <- c('C', NTP_orthoptera_data$`C`$Neutral.wt, 
                      quantile(SNM_orthoptera$boot.detail$block$'C'$Neutral.wt, probs = 0.025), 
                      quantile(SNM_orthoptera$boot.detail$block$'C'$Neutral.wt, probs = 0.975))
NTP_orthoptera_D <- c('D', NTP_orthoptera_data$`D`$Neutral.wt, 
                      quantile(SNM_orthoptera$boot.detail$block$'D'$Neutral.wt, probs = 0.025), 
                      quantile(SNM_orthoptera$boot.detail$block$'D'$Neutral.wt, probs = 0.975))
NTP_orthoptera_F <- c('F', NTP_orthoptera_data$`F`$Neutral.wt, 
                      quantile(SNM_orthoptera$boot.detail$block$'F'$Neutral.wt, probs = 0.025), 
                      quantile(SNM_orthoptera$boot.detail$block$'F'$Neutral.wt, probs = 0.975))
NTP_orthoptera_OG2 <- c('OG2', NTP_orthoptera_data$`OG2`$Neutral.wt, 
                        quantile(SNM_orthoptera$boot.detail$block$'OG2'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_orthoptera$boot.detail$block$'OG2'$Neutral.wt, probs = 0.975))
NTP_orthoptera_OG3 <- c('OG3', NTP_orthoptera_data$`OG3`$Neutral.wt, 
                        quantile(SNM_orthoptera$boot.detail$block$'OG3'$Neutral.wt, probs = 0.025), 
                        quantile(SNM_orthoptera$boot.detail$block$'OG3'$Neutral.wt, probs = 0.975))

NTP_orthoptera_summary <- as.data.frame(rbind(NTP_orthoptera_B, NTP_orthoptera_C, NTP_orthoptera_D,
                                              NTP_orthoptera_F, 
                                              NTP_orthoptera_OG2, NTP_orthoptera_OG3))

NTP_orthoptera_summary

# Rename column and row headings
colnames(NTP_orthoptera_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NTP_orthoptera_summary) = 1:6

# Add mean ACD
NTP_orthoptera_summary <- left_join(NTP_orthoptera_summary, ACD_orthoptera_summary, by = "block")
NTP_orthoptera_summary$mean <- as.numeric(NTP_orthoptera_summary$mean)
NTP_orthoptera_summary$lower.95.quant <- as.numeric(NTP_orthoptera_summary$lower.95.quant)
NTP_orthoptera_summary$upper.95.quant <- as.numeric(NTP_orthoptera_summary$upper.95.quant)

NTP_orthoptera_summary$range <- NTP_orthoptera_summary$upper.95.quant - NTP_orthoptera_summary$lower.95.quant

write.csv(NTP_orthoptera_summary, file = "Results/NTP_orthoptera_summary.csv")


##### iCAMP - inferring community assembly mechanisms by phylogenetic bin-based null model analysis #####
# Phylogeny 
orthoptera_tips <-  intersect(orthoptera_phylo[["tip.labels"]], colnames(orthoptera_composition_matrix))
orthoptera_phylo <- ape::keep.tip(orthoptera_phylo, orthoptera_tips)
orthoptera_phylo$tip.labels <- NULL
orthoptera_phylo$node.labels <- NULL

# Root the tree
orthoptera_phylo_rooted <- phytools :: midpoint.root(orthoptera_phylo)

save.wd = "iCAMP outputs/Orthoptera iCAMP outputs"

# Phylogenetic distance matrix
pd.orthoptera = pdist.big(tree = orthoptera_phylo_rooted, wd=getwd(), nworker = 8, memory.G = 500)

# iCAMP
iCAMP_orthoptera =iCAMP::icamp.big(comm=orthoptera_composition_matrix, pd.desc = pd.orthoptera$pd.file, pd.spname=pd.orthoptera$tip.label,
                                   pd.wd = save.wd, rand = 500, tree=orthoptera_phylo_rooted,
                                   prefix = 'Orthoptera', ds = 0.2, pd.cut = NA, sp.check = TRUE,
                                   phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                                   phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                                   nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                                   qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                                   correct.special = TRUE, unit.sum = rowSums(orthoptera_composition_matrix), special.method = "depend",
                                   ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)
iCAMP_orthoptera 


iCAMP_orthoptera_processes <- as.data.frame(iCAMP_orthoptera$detail$processes)

# Calculate mean of each process in each sampling block 
colnames(iCAMP_orthoptera_processes)
colnames(iCAMP_orthoptera_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')
iCAMP_orthoptera_processes
colMeans(iCAMP_orthoptera_processes[3:7])

iCAMP_orthoptera_processes <- separate(iCAMP_orthoptera_processes, sample2, into = c("block", "num")) 

iCAMP_orthoptera_processes_summary <- as.data.frame(iCAMP_orthoptera_processes %>% group_by(block) %>% summarise(mean_HeS = mean(HeS),
                                                                                                                 mean_HoS = mean(HoS), 
                                                                                                                 mean_DL = mean(DL),
                                                                                                                 mean_HoD = mean(HoD),
                                                                                                                 mean_Dr = mean(Dr)))
colMeans(iCAMP_orthoptera_processes_summary[2:6])

# Join with log ACD 
iCAMP_orthoptera_processes_summary <- left_join(iCAMP_orthoptera_processes_summary, ACD_orthoptera_summary, by = 'block')
write.csv(iCAMP_orthoptera_processes_summary , file = "Results/iCAMP_orthoptera_processes_summary.csv")

## Phylogenetic bins
iCAMP_orthoptera$detail$taxabin$state.united # the row numbering is the final bin ID, the 1st column is orginal bin IDs, the 2nd column is the taxa number in each final bin, the 3rd to 5th columns show the maximum, mean, and standard deviation of phylogenetic distances within each final bin
iCAMP_orthoptera$detail$taxabin$sp.bin # shows which species are in each bin

## Plot tree and show bins
library(ggtree)
ggtree(orthoptera_phylo) +
  geom_tiplab(size = 3) +
  geom_nodelab(size = 3, nudge_x =-0.5, nudge_y = 1.2) +
  geom_strip('TETR05', 'TETR21', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('GRYL01', 'GRYL21', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  geom_strip('TRIG06', 'UNID01', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  xlim(0,5) +
  ggtitle('Orthoptera') +
  theme(plot.margin = unit(c(0.1,0.1,0.5,0.1), "cm"),
        plot.title = element_text(size = 15))
ggsave("OrthopteraTree.pdf", width = 15, height = 55, units = "cm")


####################################################################################################
###################################### Spiders #####################################################
#####################################################################################################

## Spider abundance data collected by Sarah Maunsell et al. https://doi.org/10.5281/zenodo.4139685
# Load the spiders data
spiders_composition_matrix <- load_safe_data(4139685, 'SpiderAssem')

# Remove non-relevant columns
spiders_composition_matrix <- subset(spiders_composition_matrix, select = -c(Date, Type))

# Set site names as rownames
rownames(spiders_composition_matrix) <- spiders_composition_matrix$Location
spiders_composition_matrix <- subset(spiders_composition_matrix, select = - Location)

# Remove oil palm
spiders_composition_matrix <- spiders_composition_matrix[ grep("OP", rownames(spiders_composition_matrix), invert = TRUE) , ] 

# Remove the word 'count' from the morphospecies names
colnames(spiders_composition_matrix) <- gsub("_count", "", colnames(spiders_composition_matrix))

# Remove taxa (columns) whose abundance is zero (maybe these are taxa that were only found in OP?)
colSums(spiders_composition_matrix)
spiders_composition_matrix <- spiders_composition_matrix[, which(colSums(spiders_composition_matrix) != 0)]
colSums(spiders_composition_matrix)

# Remove taxa that are not in the phylogeny for spiders, therefore also not in the iCAMP analysis
spiders_composition_matrix <- subset(spiders_composition_matrix, select = -c(GNA01, HER01, PIS01, TEB01, SCY01, THS01))

sum(colSums(spiders_composition_matrix)) # number of individuals
ncol(spiders_composition_matrix) # number of species
nrow(spiders_composition_matrix) # number of sites

## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
# Select only sites that are in spiders_composition_matrix
ACD_spiders <- subset(ACD_all, ACD_all$ID %in% rownames(spiders_composition_matrix))

# Calculate mean ACD
library(tidyr)
ACD_spiders <- separate(ACD_spiders, ID, into = c("block", "num"), remove = FALSE)
ACD_spiders <- as.data.frame(ACD_spiders %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_spiders_summary <- as.data.frame(ACD_spiders %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))

# Just sampling block names to be used for analysis
Sites_spiders <- subset(ACD_spiders, select = c(ID, block))
rownames(Sites_spiders) <- Sites_spiders[, 1]
Sites_spiders <- subset(Sites_spiders, select = block)

##### NST - normalised stochasticity ratio #####
NST_spiders <- tNST(spiders_composition_matrix, Sites_spiders, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)
NST_spiders$index.grp

mean(NST_spiders$index.grp$NST.i.ruzicka)

NST_spiders_summary <- subset(NST_spiders$index.grp,  select = c(group, NST.i.ruzicka))
NST_spiders_summary <- NST_spiders_summary %>% split(NST_spiders_summary$group) # Split so you can separately index each sampling block

# Bootstrapping
NST_spiders_boot <- nst.boot(NST_spiders, out.detail = TRUE, nworker = 2)
NST_spiders_boot

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw
NST_spiders_boot$detail

NST_spiders_A <- c('A', NST_spiders_summary$'A'$NST.i.ruzicka, 
                   quantile(NST_spiders_boot$detail$NST.boot$'A', probs = 0.025), 
                   quantile(NST_spiders_boot$detail$NST.boot$'A', probs = 0.975))
NST_spiders_B <- c('B', NST_spiders_summary$'B'$NST.i.ruzicka, 
                   quantile(NST_spiders_boot$detail$NST.boot$'B', probs = 0.025), 
                   quantile(NST_spiders_boot$detail$NST.boot$'B', probs = 0.975))
NST_spiders_C <- c('C', NST_spiders_summary$'C'$NST.i.ruzicka, 
                   quantile(NST_spiders_boot$detail$NST.boot$'C', probs = 0.025), 
                   quantile(NST_spiders_boot$detail$NST.boot$'C', probs = 0.975))
NST_spiders_D <- c('D', NST_spiders_summary$'D'$NST.i.ruzicka, 
                   quantile(NST_spiders_boot$detail$NST.boot$'D', probs = 0.025), 
                   quantile(NST_spiders_boot$detail$NST.boot$'D', probs = 0.975))
NST_spiders_E <- c('E', NST_spiders_summary$'E'$NST.i.ruzicka, 
                   quantile(NST_spiders_boot$detail$NST.boot$'E', probs = 0.025), 
                   quantile(NST_spiders_boot$detail$NST.boot$'E', probs = 0.975))
NST_spiders_F <- c('F', NST_spiders_summary$'F'$NST.i.ruzicka, 
                   quantile(NST_spiders_boot$detail$NST.boot$'F', probs = 0.025), 
                   quantile(NST_spiders_boot$detail$NST.boot$'F', probs = 0.975))
NST_spiders_LF1 <- c('LF1', NST_spiders_summary$'LF1'$NST.i.ruzicka, 
                     quantile(NST_spiders_boot$detail$NST.boot$'LF1', probs = 0.025), 
                     quantile(NST_spiders_boot$detail$NST.boot$'LF1', probs = 0.975))
NST_spiders_LF2 <- c('LF2', NST_spiders_summary$'LF2'$NST.i.ruzicka, 
                     quantile(NST_spiders_boot$detail$NST.boot$'LF2', probs = 0.025), 
                     quantile(NST_spiders_boot$detail$NST.boot$'LF2', probs = 0.975))
NST_spiders_OG2 <- c('OG2', NST_spiders_summary$'OG2'$NST.i.ruzicka, 
                     quantile(NST_spiders_boot$detail$NST.boot$'OG2', probs = 0.025), 
                     quantile(NST_spiders_boot$detail$NST.boot$'OG2', probs = 0.975))
NST_spiders_OG3 <- c('OG3', NST_spiders_summary$'OG3'$NST.i.ruzicka, 
                     quantile(NST_spiders_boot$detail$NST.boot$'OG3', probs = 0.025), 
                     quantile(NST_spiders_boot$detail$NST.boot$'OG3', probs = 0.975))
NST_spiders_summary <- as.data.frame(rbind(NST_spiders_A, NST_spiders_B, NST_spiders_C, NST_spiders_D,
                                           NST_spiders_E, NST_spiders_F, NST_spiders_LF1, NST_spiders_LF2, 
                                           NST_spiders_OG2, NST_spiders_OG3))

colnames(NST_spiders_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_spiders_summary) = 1:10

str(NST_spiders_summary)

NST_spiders_summary$mean <- as.numeric(NST_spiders_summary$mean)
NST_spiders_summary$lower.95.quant <- as.numeric(NST_spiders_summary$lower.95.quant)
NST_spiders_summary$upper.95.quant <- as.numeric(NST_spiders_summary$upper.95.quant)

NST_spiders_summary <- left_join(NST_spiders_summary, ACD_spiders_summary, by = "block")

NST_spiders_summary$range <- NST_spiders_summary$upper.95.quant - NST_spiders_summary$lower.95.quant
NST_spiders_summary

mean(NST_spiders_summary$mean)

write.csv(NST_spiders_summary, file = "Results/NST_spiders_summary.csv")


##### MST - Modified stochasticity ratio #####

MST_spiders_summary <- subset(NST_spiders$index.grp,  select = c(group, MST.i.ruzicka))
MST_spiders_summary <- MST_spiders_summary %>% split(MST_spiders_summary$group) # Split so you can separately index each sampling block

MST_spiders_boot <- NST_spiders_boot

MST_spiders_A <- c('A', MST_spiders_summary$'A'$MST.i.ruzicka, 
                   quantile(MST_spiders_boot$detail$MST.boot$'A', probs = 0.025), 
                   quantile(MST_spiders_boot$detail$MST.boot$'A', probs = 0.975))
MST_spiders_B <- c('B', MST_spiders_summary$'B'$MST.i.ruzicka, 
                   quantile(MST_spiders_boot$detail$MST.boot$'B', probs = 0.025), 
                   quantile(MST_spiders_boot$detail$MST.boot$'B', probs = 0.975))
MST_spiders_C <- c('C', MST_spiders_summary$'C'$MST.i.ruzicka, 
                   quantile(MST_spiders_boot$detail$MST.boot$'C', probs = 0.025), 
                   quantile(MST_spiders_boot$detail$MST.boot$'C', probs = 0.975))
MST_spiders_D <- c('D', MST_spiders_summary$'D'$MST.i.ruzicka, 
                   quantile(MST_spiders_boot$detail$MST.boot$'D', probs = 0.025), 
                   quantile(MST_spiders_boot$detail$MST.boot$'D', probs = 0.975))
MST_spiders_E <- c('E', MST_spiders_summary$'E'$MST.i.ruzicka, 
                   quantile(MST_spiders_boot$detail$MST.boot$'E', probs = 0.025), 
                   quantile(MST_spiders_boot$detail$MST.boot$'E', probs = 0.975))
MST_spiders_F <- c('F', MST_spiders_summary$'F'$MST.i.ruzicka, 
                   quantile(MST_spiders_boot$detail$MST.boot$'F', probs = 0.025), 
                   quantile(MST_spiders_boot$detail$MST.boot$'F', probs = 0.975))
MST_spiders_LF1 <- c('LF1', MST_spiders_summary$'LF1'$MST.i.ruzicka, 
                     quantile(MST_spiders_boot$detail$MST.boot$'LF1', probs = 0.025), 
                     quantile(MST_spiders_boot$detail$MST.boot$'LF1', probs = 0.975))
MST_spiders_LF2 <- c('LF2', MST_spiders_summary$'LF2'$MST.i.ruzicka, 
                     quantile(MST_spiders_boot$detail$MST.boot$'LF2', probs = 0.025), 
                     quantile(MST_spiders_boot$detail$MST.boot$'LF2', probs = 0.975))
MST_spiders_OG2 <- c('OG2', MST_spiders_summary$'OG2'$MST.i.ruzicka, 
                     quantile(MST_spiders_boot$detail$MST.boot$'OG2', probs = 0.025), 
                     quantile(MST_spiders_boot$detail$MST.boot$'OG2', probs = 0.975))
MST_spiders_OG3 <- c('OG3', MST_spiders_summary$'OG3'$MST.i.ruzicka, 
                     quantile(MST_spiders_boot$detail$MST.boot$'OG3', probs = 0.025), 
                     quantile(MST_spiders_boot$detail$MST.boot$'OG3', probs = 0.975))
MST_spiders_summary <- as.data.frame(rbind(MST_spiders_A, MST_spiders_B, MST_spiders_C, MST_spiders_D,
                                           MST_spiders_E, MST_spiders_F, MST_spiders_LF1, MST_spiders_LF2, 
                                           MST_spiders_OG2, MST_spiders_OG3))

colnames(MST_spiders_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_spiders_summary) = 1:10

str(MST_spiders_summary)

MST_spiders_summary$mean <- as.numeric(MST_spiders_summary$mean)
MST_spiders_summary$lower.95.quant <- as.numeric(MST_spiders_summary$lower.95.quant)
MST_spiders_summary$upper.95.quant <- as.numeric(MST_spiders_summary$upper.95.quant)

MST_spiders_summary <- left_join(MST_spiders_summary, ACD_spiders_summary, by = "block")

MST_spiders_summary$range <- MST_spiders_summary$upper.95.quant - MST_spiders_summary$lower.95.quant
MST_spiders_summary

mean(MST_spiders_summary$mean)

write.csv(MST_spiders_summary, file = "Results/MST_spiders_summary.csv")


##### NTP - Neutral taxa percentage #####

spiders_composition_matrix <- as.data.frame(spiders_composition_matrix)
str(spiders_composition_matrix)

# Fit Sloan's neutral model
SNM_spiders <- snm.comm(comm = spiders_composition_matrix, treat = Sites_spiders)
NTP_spiders_data <- SNM_spiders$ratio.summary  %>% filter(index == "mean")
NTP_spiders_data <- NTP_spiders_data  %>% dplyr :: select(index, treatment.id, Neutral.wt)

NTP_spiders_data <- NTP_spiders_data %>% split(NTP_spiders_data$treatment.id)

NTP_spiders_A <- c('A', NTP_spiders_data$`A`$Neutral.wt, 
                   quantile(SNM_spiders$boot.detail$block$'A'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_spiders$boot.detail$block$'A'$Neutral.wt, probs = 0.975))
NTP_spiders_B <- c('B', NTP_spiders_data$`B`$Neutral.wt, 
                   quantile(SNM_spiders$boot.detail$block$'B'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_spiders$boot.detail$block$'B'$Neutral.wt, probs = 0.975))
NTP_spiders_C <- c('C', NTP_spiders_data$`C`$Neutral.wt, 
                   quantile(SNM_spiders$boot.detail$block$'C'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_spiders$boot.detail$block$'C'$Neutral.wt, probs = 0.975))
NTP_spiders_D <- c('D', NTP_spiders_data$`D`$Neutral.wt, 
                   quantile(SNM_spiders$boot.detail$block$'D'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_spiders$boot.detail$block$'D'$Neutral.wt, probs = 0.975))
NTP_spiders_E <- c('E', NTP_spiders_data$`E`$Neutral.wt, 
                   quantile(SNM_spiders$boot.detail$block$'E'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_spiders$boot.detail$block$'E'$Neutral.wt, probs = 0.975))
NTP_spiders_F <- c('F', NTP_spiders_data$`F`$Neutral.wt, 
                   quantile(SNM_spiders$boot.detail$block$'F'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_spiders$boot.detail$block$'F'$Neutral.wt, probs = 0.975))
NTP_spiders_LF1 <- c('LF2', NTP_spiders_data$`LF1`$Neutral.wt, 
                     quantile(SNM_spiders$boot.detail$block$'LF1'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_spiders$boot.detail$block$'LF1'$Neutral.wt, probs = 0.975))
NTP_spiders_LF2 <- c('LF2', NTP_spiders_data$`LF2`$Neutral.wt, 
                     quantile(SNM_spiders$boot.detail$block$'LF2'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_spiders$boot.detail$block$'LF2'$Neutral.wt, probs = 0.975))
NTP_spiders_OG2 <- c('OG2', NTP_spiders_data$`OG2`$Neutral.wt, 
                     quantile(SNM_spiders$boot.detail$block$'OG2'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_spiders$boot.detail$block$'OG2'$Neutral.wt, probs = 0.975))
NTP_spiders_OG3 <- c('OG3', NTP_spiders_data$`OG3`$Neutral.wt, 
                     quantile(SNM_spiders$boot.detail$block$'OG3'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_spiders$boot.detail$block$'OG3'$Neutral.wt, probs = 0.975))

NTP_spiders_summary <- as.data.frame(rbind(NTP_spiders_A, NTP_spiders_B, NTP_spiders_C, NTP_spiders_D,
                                           NTP_spiders_E, NTP_spiders_F, NTP_spiders_LF1, NTP_spiders_LF2, 
                                           NTP_spiders_OG2, NST_spiders_OG3))


# Rename column and row headings
colnames(NTP_spiders_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NTP_spiders_summary) = 1:10

# Add mean ACD
NTP_spiders_summary <- left_join(NTP_spiders_summary, ACD_spiders_summary, by = "block")

str(NTP_spiders_summary)
NTP_spiders_summary$mean <- as.numeric(NTP_spiders_summary$mean)
NTP_spiders_summary$lower.95.quant <- as.numeric(NTP_spiders_summary$lower.95.quant)
NTP_spiders_summary$upper.95.quant <- as.numeric(NTP_spiders_summary$upper.95.quant)

NTP_spiders_summary$range <- NTP_spiders_summary$upper.95.quant - NTP_spiders_summary$lower.95.quant

mean(NTP_spiders_summary$mean)

write.csv(NTP_spiders_summary, file = "Results/NTP_spiders_summary.csv")

##### iCAMP - inferring community assembly mechanisms by phylogenetic bin-based null model analysis #####

# Phylogeny
spiders_phylo <- safedata :: get_phylogeny(4139685)
spiders_tips <-  intersect(spiders_phylo[["tip.labels"]], colnames(spiders_composition_matrix))
spiders_phylo <- ape::keep.tip(spiders_phylo, spiders_tips)
spiders_phylo$tip.labels <- NULL
spiders_phylo$node.labels <- NULL

# Root the tree
spiders_phylo_rooted <- phytools::midpoint.root(spiders_phylo)
spiders_phylo_rooted

#  Phylogenetic distance matrix.
save.wd = "iCAMP outputs/Spiders iCAMP outputs_repeat"

# Phylogenetic distance matrix
pd.spiders = pdist.big(tree = spiders_phylo_rooted, wd=save.wd, nworker = 8, memory.G = 500)

# iCAMP
iCAMP_spiders =iCAMP::icamp.big(comm=spiders_composition_matrix, pd.desc = pd.spiders$pd.file, pd.spname=pd.spiders$tip.label,
                             pd.wd = save.wd, rand = 500, tree=spiders_phylo_rooted,
                             prefix = 'spiders', ds = 0.2, pd.cut = NA, sp.check = TRUE,
                             phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                             phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                             nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                             qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                             correct.special = TRUE, unit.sum = rowSums(spiders_composition_matrix), special.method = "depend",
                             ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)

iCAMP_spiders

## Calculate mean of each process in each sampling block
iCAMP_spiders_processes <- as.data.frame(iCAMP_spiders$detail$processes)
colnames(iCAMP_spiders_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')

colMeans(iCAMP_spiders_processes[,3:7])

iCAMP_spiders_processes <- tidyr::separate(iCAMP_spiders_processes, sample2, into = c("block", "num")) 

iCAMP_spiders_processes_summary <- as.data.frame(iCAMP_spiders_processes %>% group_by(block) %>% summarise(mean_HeS = mean(HeS),
                                                                                                     mean_HoS = mean(HoS), 
                                                                                                     mean_DL = mean(DL),
                                                                                                     mean_HoD = mean(HoD),
                                                                                                     mean_Dr = mean(Dr)))

colMeans(iCAMP_spiders_processes_summary[,2:6])

#Join with log ACD
iCAMP_spiders_processes_summary <- left_join(iCAMP_spiders_processes_summary, ACD_spiders_summary, by = 'block')


write.csv(iCAMP_spiders_processes_summary, file = "Results/iCAMP_spiders_processes_summary.csv")

## Phylogenetic bins
iCAMP_spiders$detail$taxabin$state.united$bin.united.tax.num # number of taxa in each bin
iCAMP_spiders$detail$taxabin$sp.bin # shows which species are in each bin

## Plot tree and show bins
ggtree(spiders_phylo) +
  geom_tiplab(size = 2.8) +
  geom_nodelab(size = 3, nudge_x =-0.5, nudge_y = 1.2) +
  geom_strip('SAL02', 'SAL47', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('THD01', 'THD67', barsize = 2, color = 'chartreuse3', 
             label = 'Bin 3', offset = 1.6, offset.text = 0.1) +
  geom_strip('THO01', 'THO20', barsize = 2, color = 'purple', 
             label = 'Bin 4', offset = 1.6, offset.text = 0.1) +
  geom_strip('ARA01', 'ARA16', barsize = 2, color = 'orange2', 
             label = 'Bin 5', offset = 1.6, offset.text = 0.1) +
  geom_strip('PHO11', 'HAH01', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  xlim(0,5) +
  ggtitle("Spiders") +
  theme(plot.margin = unit(c(0.1,0.1,0.5,0.1), "cm"),
        plot.title = element_text(size = 15))
ggsave("SpidersTree.pdf", width = 15, height = 55, units = "cm")



######################################################################################################
############################################ Moths ###################################################
######################################################################################################
#### Moths ####
# Moth abundance data collected by Sarah Maunsell et al https://zenodo.org/record/4247169#.Y9FU4nb7RD9
# Load the moths data
moths_composition_matrix <- load_safe_data(4247169, 'MothAssem')
moths_composition_matrix <- subset(moths_composition_matrix, select = -c(Date, Type))

# Set site names as rownames
rownames(moths_composition_matrix) <- moths_composition_matrix$Location
moths_composition_matrix <- subset(moths_composition_matrix, select = - Location)

# Remove oil palm
moths_composition_matrix <- moths_composition_matrix[ grep("OP", rownames(moths_composition_matrix), invert = TRUE) , ] # Remove oil palm plantations

# Remove the word 'count' from the morphospecies names
colnames(moths_composition_matrix) <- gsub("_count", "", colnames(moths_composition_matrix))

# Remove taxa (columns) whose abundance is zero (maybe these are taxa that were only found in OP?)
colSums(moths_composition_matrix)
moths_composition_matrix <- moths_composition_matrix[, which(colSums(moths_composition_matrix) != 0)]
colSums(moths_composition_matrix)

sum(colSums(moths_composition_matrix)) # number of individuals
ncol(moths_composition_matrix) # number of species
nrow(moths_composition_matrix) # number of sites


## ACD - above-ground carbon density data derived from LiDAR by Swinfield et al., 2014 https://doi.org/10.5281/zenodo.4020697 
# Select only sites that are in moths_composition_matrix
ACD_moths <- subset(ACD_all, ACD_all$ID %in% rownames(moths_composition_matrix))

# Calculate mean ACD
ACD_moths <- separate(ACD_moths, ID, into = c("block", "num"), remove = FALSE)
ACD_moths <- as.data.frame(ACD_moths %>% group_by(block) %>% mutate(Mean_logACD = mean(logACD)))

# Create summarised table to be used for plotting and regression
ACD_moths_summary <- as.data.frame(ACD_moths %>% group_by(block) %>% distinct(block, .keep_all= TRUE) %>% select(block, Mean_logACD))

# Just sampling block names to be used for analysis
Sites_moths <- subset(ACD_moths, select = c(ID, block))
rownames(Sites_moths) <- Sites_moths[, 1]
Sites_moths <- subset(Sites_moths, select = block)

##### NST - normalised stochasticity ratio #####
NST_moths <- tNST(moths_composition_matrix, Sites_moths, dist.method = "ruzicka", output.rand = TRUE, RC = TRUE)
mean(NST_moths$index.grp$NST.i.ruzicka)

NST_moths_summary <- subset(NST_moths$index.grp,  select = c(group, NST.i.ruzicka))
NST_moths_summary <- NST_moths_summary %>% split(NST_moths_summary$group) # Split so you can separately index each sampling block

# Bootstrapping
NST_moths_boot <- nst.boot(NST_moths, out.detail = TRUE, nworker = 2)

# Taking the 95th quantiles of the bootstrapping list for each sampling block
# The bootstrapping list is the results of each random draw
NST_moths_boot$detail

NST_moths_A <- c('A', NST_moths_summary$'A'$NST.i.ruzicka, 
                   quantile(NST_moths_boot$detail$NST.boot$'A', probs = 0.025), 
                   quantile(NST_moths_boot$detail$NST.boot$'A', probs = 0.975))

NST_moths_B <- c('B', NST_moths_summary$'B'$NST.i.ruzicka, 
                   quantile(NST_moths_boot$detail$NST.boot$'B', probs = 0.025), 
                   quantile(NST_moths_boot$detail$NST.boot$'B', probs = 0.975))

NST_moths_C <- c('C', NST_moths_summary$'C'$NST.i.ruzicka, 
                   quantile(NST_moths_boot$detail$NST.boot$'C', probs = 0.025), 
                   quantile(NST_moths_boot$detail$NST.boot$'C', probs = 0.975))

NST_moths_D <- c('D', NST_moths_summary$'D'$NST.i.ruzicka, 
                   quantile(NST_moths_boot$detail$NST.boot$'D', probs = 0.025), 
                   quantile(NST_moths_boot$detail$NST.boot$'D', probs = 0.975))

NST_moths_E <- c('E', NST_moths_summary$'E'$NST.i.ruzicka, 
                   quantile(NST_moths_boot$detail$NST.boot$'E', probs = 0.025), 
                   quantile(NST_moths_boot$detail$NST.boot$'E', probs = 0.975))

NST_moths_F <- c('F', NST_moths_summary$'F'$NST.i.ruzicka, 
                   quantile(NST_moths_boot$detail$NST.boot$'F', probs = 0.025), 
                   quantile(NST_moths_boot$detail$NST.boot$'F', probs = 0.975))

NST_moths_OG2 <- c('OG2', NST_moths_summary$'OG2'$NST.i.ruzicka, 
                     quantile(NST_moths_boot$detail$NST.boot$'OG2', probs = 0.025), 
                     quantile(NST_moths_boot$detail$NST.boot$'OG2', probs = 0.975))

NST_moths_OG3 <- c('OG3', NST_moths_summary$'OG3'$NST.i.ruzicka, 
                     quantile(NST_moths_boot$detail$NST.boot$'OG3', probs = 0.025), 
                     quantile(NST_moths_boot$detail$NST.boot$'OG3', probs = 0.975))

NST_moths_summary <- as.data.frame(rbind(NST_moths_A, NST_moths_B, NST_moths_C, NST_moths_D,
                                           NST_moths_E, NST_moths_F, NST_moths_OG2, NST_moths_OG3))

colnames(NST_moths_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NST_moths_summary) = 1:8

NST_moths_summary$mean <- as.numeric(NST_moths_summary$mean)
NST_moths_summary$lower.95.quant <- as.numeric(NST_moths_summary$lower.95.quant)
NST_moths_summary$upper.95.quant <- as.numeric(NST_moths_summary$upper.95.quant)

NST_moths_summary <- left_join(NST_moths_summary, ACD_moths_summary, by = "block")
NST_moths_summary$range <- NST_moths_summary$upper.95.quant - NST_moths_summary$lower.95.quant
NST_moths_summary

mean(NST_moths_summary$mean)

write.csv(NST_moths_summary, file = "Results/NST_moths_summary.csv")
##### MST - Modified stochasticity ratio #####



MST_moths_summary <- subset(NST_moths$index.grp,  select = c(group, MST.i.ruzicka))
MST_moths_summary <- MST_moths_summary %>% split(MST_moths_summary$group) # Split so you can separately index each sampling block

MST_moths_boot <- NST_moths_boot

MST_moths_A <- c('A', MST_moths_summary$'A'$MST.i.ruzicka, 
                 quantile(MST_moths_boot$detail$MST.boot$'A', probs = 0.025), 
                 quantile(MST_moths_boot$detail$MST.boot$'A', probs = 0.975))

MST_moths_B <- c('B', MST_moths_summary$'B'$MST.i.ruzicka, 
                 quantile(MST_moths_boot$detail$MST.boot$'B', probs = 0.025), 
                 quantile(MST_moths_boot$detail$MST.boot$'B', probs = 0.975))

MST_moths_C <- c('C', MST_moths_summary$'C'$MST.i.ruzicka, 
                 quantile(MST_moths_boot$detail$MST.boot$'C', probs = 0.025), 
                 quantile(MST_moths_boot$detail$MST.boot$'C', probs = 0.975))

MST_moths_D <- c('D', MST_moths_summary$'D'$MST.i.ruzicka, 
                 quantile(MST_moths_boot$detail$MST.boot$'D', probs = 0.025), 
                 quantile(MST_moths_boot$detail$MST.boot$'D', probs = 0.975))

MST_moths_E <- c('E', MST_moths_summary$'E'$MST.i.ruzicka, 
                 quantile(MST_moths_boot$detail$MST.boot$'E', probs = 0.025), 
                 quantile(MST_moths_boot$detail$MST.boot$'E', probs = 0.975))

MST_moths_F <- c('F', MST_moths_summary$'F'$MST.i.ruzicka, 
                 quantile(MST_moths_boot$detail$MST.boot$'F', probs = 0.025), 
                 quantile(MST_moths_boot$detail$MST.boot$'F', probs = 0.975))

MST_moths_OG2 <- c('OG2', MST_moths_summary$'OG2'$MST.i.ruzicka, 
                   quantile(MST_moths_boot$detail$MST.boot$'OG2', probs = 0.025), 
                   quantile(MST_moths_boot$detail$MST.boot$'OG2', probs = 0.975))

MST_moths_OG3 <- c('OG3', MST_moths_summary$'OG3'$MST.i.ruzicka, 
                   quantile(MST_moths_boot$detail$MST.boot$'OG3', probs = 0.025), 
                   quantile(MST_moths_boot$detail$MST.boot$'OG3', probs = 0.975))

MST_moths_summary <- as.data.frame(rbind(MST_moths_A, MST_moths_B, MST_moths_C, MST_moths_D,
                                         MST_moths_E, MST_moths_F, MST_moths_OG2, MST_moths_OG3))

colnames(MST_moths_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(MST_moths_summary) = 1:8

MST_moths_summary$mean <- as.numeric(MST_moths_summary$mean)
MST_moths_summary$lower.95.quant <- as.numeric(MST_moths_summary$lower.95.quant)
MST_moths_summary$upper.95.quant <- as.numeric(MST_moths_summary$upper.95.quant)

MST_moths_summary <- left_join(MST_moths_summary, ACD_moths_summary, by = "block")
MST_moths_summary$range <- MST_moths_summary$upper.95.quant - MST_moths_summary$lower.95.quant
MST_moths_summary

mean(MST_moths_summary$mean)

write.csv(MST_moths_summary, file = "Results/MST_moths_summary.csv")



##### NTP - Neutral taxa percentage #####
moths_composition_matrix <- as.data.frame(moths_composition_matrix)

# Fit Sloan's neutral model
SNM_moths <- snm.comm(comm = moths_composition_matrix, treat = Sites_moths)
NTP_moths_data <- SNM_moths$ratio.summary  %>% filter(index == "mean")
NTP_moths_data <- NTP_moths_data  %>% dplyr :: select(index, treatment.id, Neutral.wt)
NTP_moths_data <- NTP_moths_data %>% split(NTP_moths_data$treatment.id)


NTP_moths_A <- c('A', NTP_moths_data$`A`$Neutral.wt, 
                   quantile(SNM_moths$boot.detail$block$'A'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_moths$boot.detail$block$'A'$Neutral.wt, probs = 0.975))
NTP_moths_B <- c('B', NTP_moths_data$`B`$Neutral.wt, 
                   quantile(SNM_moths$boot.detail$block$'B'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_moths$boot.detail$block$'B'$Neutral.wt, probs = 0.975))
NTP_moths_C <- c('C', NTP_moths_data$`C`$Neutral.wt, 
                   quantile(SNM_moths$boot.detail$block$'C'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_moths$boot.detail$block$'C'$Neutral.wt, probs = 0.975))
NTP_moths_D <- c('D', NTP_moths_data$`D`$Neutral.wt, 
                   quantile(SNM_moths$boot.detail$block$'D'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_moths$boot.detail$block$'D'$Neutral.wt, probs = 0.975))
NTP_moths_E <- c('E', NTP_moths_data$`E`$Neutral.wt, 
                   quantile(SNM_moths$boot.detail$block$'E'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_moths$boot.detail$block$'E'$Neutral.wt, probs = 0.975))
NTP_moths_F <- c('F', NTP_moths_data$`F`$Neutral.wt, 
                   quantile(SNM_moths$boot.detail$block$'F'$Neutral.wt, probs = 0.025), 
                   quantile(SNM_moths$boot.detail$block$'F'$Neutral.wt, probs = 0.975))
NTP_moths_OG2 <- c('OG2', NTP_moths_data$`OG2`$Neutral.wt, 
                     quantile(SNM_moths$boot.detail$block$'OG2'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_moths$boot.detail$block$'OG2'$Neutral.wt, probs = 0.975))
NTP_moths_OG3 <- c('OG3', NTP_moths_data$`OG3`$Neutral.wt, 
                     quantile(SNM_moths$boot.detail$block$'OG3'$Neutral.wt, probs = 0.025), 
                     quantile(SNM_moths$boot.detail$block$'OG3'$Neutral.wt, probs = 0.975))

NTP_moths_summary <- as.data.frame(rbind(NTP_moths_A, NTP_moths_B, NTP_moths_C, NTP_moths_D,
                                           NTP_moths_E, NTP_moths_F,  NTP_moths_OG2, NST_moths_OG3))
# Rename column and row headings
colnames(NTP_moths_summary) = c('block', 'mean', 'lower.95.quant', 'upper.95.quant')
rownames(NTP_moths_summary) = 1:8

# Add mean ACD
NTP_moths_summary <- left_join(NTP_moths_summary, ACD_moths_summary, by = "block")

NTP_moths_summary$mean <- as.numeric(NTP_moths_summary$mean)
NTP_moths_summary$lower.95.quant <- as.numeric(NTP_moths_summary$lower.95.quant)
NTP_moths_summary$upper.95.quant <- as.numeric(NTP_moths_summary$upper.95.quant)

NTP_moths_summary$range <- NTP_moths_summary$upper.95.quant - NTP_moths_summary$lower.95.quant

mean(NTP_moths_summary$mean)

write.csv(NTP_moths_summary, file = "Results/NTP_moths_summary.csv")



#### iCAMP ####

# get moths phylogeny
# code from safedata::get_phylogeny()
# https://rdrr.io/cran/safedata/src/R/taxa.R
  
record_set <- validate_record_ids(4247169)
record_set

# Get the record metadata containing the taxon index and if possible the
# taxon worksheet, which provides the matching of taxon names to datasets
taxa <- show_record(record_set)$taxa

# drop the id field and any duplicates
taxa <- taxa[, -match("id", names(taxa))]
taxa <- unique(taxa)

# Some datasets point more than one different "worksheet name" to the same
# taxon. This is not ideal but was not expressly an error in early versions
# of safedata_validator. Each duplicated row is a (hopefully) different
# child of the shared taxon, so promoting the taxon to a parent retains
# the expected tips.
is_tip <- ! is.na(taxa$worksheet_name)
dupe_tn <- duplicated(taxa$taxon_name[is_tip])

# split the tree into tips (taxa used in the dataset and which have
# worksheet names) and the rest of the tree that connects those tips
tips <- taxa[is_tip, ]
tree <- taxa[! is_tip, ]

# remove duplications from the tips data frame
dupes <- tips$taxon_name[which(dupe_tn)]
dupes <- tips$taxon_name %in% dupes
dupe_rows <- tips[dupes, ]
tips <- tips[! dupes, ]

# split the duplicates up into sets by the duplicated name and
# then repackage the row into new tips and new tree rows
dupe_rows <- split(dupe_rows, dupe_rows$taxon_name)

for (this_dupe in dupe_rows) {
  new_tips <- data.frame(worksheet_name = this_dupe$worksheet_name,
                         gbif_id = -1,
                         taxon_rank = "user",
                         taxon_name = this_dupe$worksheet_name,
                         gbif_status = "user",
                         dataset_id = this_dupe$dataset_id,
                         gbif_parent_id = this_dupe$gbif_id,
                         stringsAsFactors = FALSE)
  tips <- rbind(tips, new_tips)
  
  new_parent <- this_dupe[1, ]
  new_parent$worksheet_name <- NA
  tree <- rbind(tree, new_parent)
}

taxa <- rbind(tips, tree)

dupes <- duplicated(taxa$taxon_name)

dupe_names <- taxa$taxon_name[dupes]
taxa$taxon_name <- ifelse(taxa$taxon_name %in% dupe_names,
                          paste0(taxa$taxon_name, "_", taxa$gbif_id),
                          taxa$taxon_name)

# Add the parent name to the taxa to make edges, catching the root
# edge and unknown parents above the kingdom level
taxa$parent_name <- taxa$taxon_name[match(taxa$gbif_parent_id,
                                          taxa$gbif_id)]
taxa$parent_name[is.na(taxa$parent_name) &
                   taxa$taxon_rank == "kingdom"] <- "root"

still_missing <- is.na(taxa$parent_name)

terminal_vertices <- list("root", "root", "root", NA, "accepted")

edges <- taxa[, c("parent_name", "taxon_name")]
vertices <- subset(taxa, select = c(taxon_name, taxon_rank, worksheet_name,
                                    gbif_id, gbif_status))
vertices <- rbind(vertices, terminal_vertices)

#g <- igraph::graph_from_data_frame(edges, vertices = vertices) 
#g <- igraph::set_vertex_attr(g, "leaf",
                             #value = igraph::degree(g, mode = "out") == 0)

# where are the duplicate vertex names?
vertices$taxon_name[vertices$taxon_name %in% vertices$taxon_name[duplicated(vertices$taxon_name)] ]
#  there are 3 duplicated names
# "sp520_-1" "sp617_-1" "sp678_-1" "sp520_-1" "sp617_-1" "sp678_-1"

# remove them
vertices_unduplicated <- vertices %>% distinct(taxon_name, .keep_all = TRUE)
vertices$taxon_name[duplicated(vertices$taxon_name)]
vertices_unduplicated$taxon_name[duplicated(vertices_unduplicated$taxon_name)]
str(vertices)
str(vertices_unduplicated)

## and do the same for duplicate edge names
edges$taxon_name[edges$taxon_name %in% edges$taxon_name[duplicated(edges$taxon_name)] ] # identify duplicates 
edges_unduplicated <- edges %>% distinct(taxon_name, .keep_all = TRUE) # remove duplicates

# make the taxon graph again
g <- igraph::graph_from_data_frame(edges_unduplicated, vertices = vertices_unduplicated) 
g <- igraph::set_vertex_attr(g, "leaf",
                             value = igraph::degree(g, mode = "out") == 0)
# get phylogeny
moths_phylo <- igraph_to_phylo(g)



#### back to the iCAMP analysis

moths_phylo # I used the source code for the safedata::get_taxon_graph and got rid of the duplicate vertex names (there were just 3 species with duplicate vertex names)

# need to change the comp mat colnames to the taxon_name so it matches the phylo
moths_composition_matrix_orig<- load_safe_data(4247169, 'MothAssem')
moths_taxa<- get_taxa(moths_composition_matrix_orig)
colnames(moths_composition_matrix) = moths_taxa$taxon_name[match(colnames(moths_composition_matrix), rownames(moths_taxa))]
moths_tips <-  intersect(moths_phylo[["tip.labels"]], colnames(moths_composition_matrix))
moths_phylo <- ape::keep.tip(moths_phylo, moths_tips)
moths_phylo$tip.labels <- NULL
moths_phylo$node.labels <- NULL

# Root the tree
moths_phylo_rooted <- midpoint.root(moths_phylo)
moths_phylo_rooted


#  Phylogenetic distance matrix.
save.wd = "iCAMP outputs/Moths iCAMP outputs"
pd.moths = pdist.big(tree = moths_phylo_rooted, wd=save.wd, nworker = 8, memory.G = 500)

# iCAMP
iCAMP_moths =iCAMP::icamp.big(comm=moths_composition_matrix, pd.desc = pd.moths$pd.file, pd.spname=pd.moths$tip.label,
                                pd.wd = save.wd, rand = 500, tree=moths_phylo_rooted,
                                prefix = 'moths', ds = 0.2, pd.cut = NA, sp.check = TRUE,
                                phylo.rand.scale = "within.bin", taxa.rand.scale = "across.all",
                                phylo.metric = "bMPD", sig.index="Confidence", bin.size.limit = 9, 
                                nworker = 8, memory.G = 500, rtree.save = FALSE, detail.save = TRUE, 
                                qp.save = FALSE, detail.null = FALSE, ignore.zero = TRUE, output.wd = getwd(), 
                                correct.special = TRUE, unit.sum = rowSums(moths_composition_matrix), special.method = "depend",
                                ses.cut = 1.96, rc.cut = 0.95, conf.cut=0.975, omit.option = "no",meta.ab = NULL)

iCAMP_moths

## Calculate mean of each process in each sampling block
iCAMP_moths_processes <- as.data.frame(iCAMP_moths$detail$processes)

colnames(iCAMP_moths_processes) <- c('sample1', 'sample2', 'HeS', 'HoS', 'DL', 'HoD', 'Dr')

colMeans(iCAMP_moths_processes[,3:7])

iCAMP_moths_processes <- tidyr::separate(iCAMP_moths_processes, sample2, into = c("block", "num")) 

iCAMP_moths_processes_summary <- as.data.frame(iCAMP_moths_processes %>% group_by(block) %>% summarise(mean_HeS = mean(HeS),
                                                                                                           mean_HoS = mean(HoS), 
                                                                                                           mean_DL = mean(DL),
                                                                                                           mean_HoD = mean(HoD),
                                                                                                           mean_Dr = mean(Dr)))
colMeans(iCAMP_moths_processes_summary[,2:6])

#Join with log ACD
iCAMP_moths_processes_summary <- left_join(iCAMP_moths_processes_summary, ACD_moths_summary, by = 'block')

write.csv(iCAMP_moths_processes_summary, file = "Results/iCAMP_moths_processes_summary.csv")


## Phylogenetic bins
iCAMP_moths$detail$taxabin$state.united$bin.united.tax.num # number of taxa in each bin
iCAMP_moths$detail$taxabin$sp.bin # shows which species are in each bin

## Plot tree and show bins
ggtree(moths_phylo) +
  geom_tiplab(size = 2.6) +
  geom_nodelab(size = 3, nudge_x =-0.5, nudge_y = 1.2) +
  geom_strip('sp22', 'Albara reversaria', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  geom_strip('Barsine rubricostata', 'Cyana costifimbria', barsize = 2, color = 'blue', 
             label = 'Bin 1', offset = 1.6, offset.text = 0.1) +
  geom_strip('Sabanissa', 'Ugia eugrapha', barsize = 2, color = 'red', 
             label = 'Bin 2', offset = 1.6, offset.text = 0.1) +
  geom_strip('Aemene', 'Nyctemera adversata', barsize = 2, color = 'chartreuse3', 
             label = 'Bin 3', offset = 1.6, offset.text = 0.1) +
  geom_strip('Ourapteryx', 'Hyposidra talaca', barsize = 2, color = 'purple', 
             label = 'Bin 4', offset = 1.6, offset.text = 0.1) +
  geom_strip('Euthrix', 'Trabala ganesha', barsize = 2, color = 'orange2', 
             label = 'Bin 5', offset = 1.6, offset.text = 0.1) +
  xlim(0,5) +
  ggtitle("Moths") +
  theme(plot.margin = unit(c(0.1,0.1,0.5,0.1), "cm"),
        plot.title = element_text(size = 15))
ggsave("MothsTree.pdf", width = 30, height = 125, units = "cm")




