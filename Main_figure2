
library(cowplot)
library(dplyr)
library(ggplot2)
library(glmmTMB)
library(stringr)
library(tidyr)

#### Covariates: sample size and species richness ------

ants_composition_matrix <- read.csv('data/processed/ants_composition_matrix.csv', row.names = 1)
moths_composition_matrix <- read.csv('data/processed/moths_composition_matrix.csv', row.names = 1)
orthoptera_composition_matrix <- read.csv('data/processed/orthoptera_composition_matrix.csv', row.names = 1)
rove_beetles_composition_matrix <- read.csv('data/processed/rove_beetles_composition_matrix.csv', row.names = 1)
scarabs_composition_matrix <- read.csv('data/processed/scarabs_composition_matrix.csv', row.names = 1)
spiders_composition_matrix <- read.csv('data/processed/spiders_composition_matrix.csv', row.names = 1)
weevils_composition_matrix <- read.csv('data/processed/weevils_composition_matrix.csv', row.names = 1)

# sample size (number of sites per block)
ants_sites <- data.frame(site = rownames(ants_composition_matrix))
ants_sites <- separate(ants_sites , site, into = c("block", "num")) # separate into block and site
ants_sites_per_block <- ants_sites %>% group_by(block) %>% summarise(sites_per_block = n()) # calculate number of sites per block 

moths_sites <- data.frame(site = rownames(moths_composition_matrix))
moths_sites <- separate(moths_sites , site, into = c("block", "num")) # separate into block and site
moths_sites_per_block <- moths_sites %>% group_by(block) %>% summarise(sites_per_block = n()) # calculate number of sites per block 

orthoptera_sites <- data.frame(site = rownames(orthoptera_composition_matrix))
orthoptera_sites <- separate(orthoptera_sites , site, into = c("block", "num")) 
orthoptera_sites_per_block <- orthoptera_sites %>% group_by(block) %>% summarise(sites_per_block = n()) 

rove_beetles_sites <- data.frame(site = rownames(rove_beetles_composition_matrix))
rove_beetles_sites <- separate(rove_beetles_sites , site, into = c("block", "num")) 
rove_beetles_sites_per_block <- rove_beetles_sites %>% group_by(block) %>% summarise(sites_per_block = n()) 

scarabs_sites <- data.frame(site = rownames(scarabs_composition_matrix))
scarabs_sites <- separate(scarabs_sites , site, into = c("block", "num")) 
scarabs_sites_per_block <- scarabs_sites %>% group_by(block) %>% summarise(sites_per_block = n()) 

spiders_sites <- data.frame(site = rownames(spiders_composition_matrix))
spiders_sites <- separate(spiders_sites , site, into = c("block", "num")) 
spiders_sites_per_block <- spiders_sites %>% group_by(block) %>% summarise(sites_per_block = n())  

weevils_sites <- data.frame(site = rownames(weevils_composition_matrix))
weevils_sites <- separate(weevils_sites , site, into = c("block", "num")) 
weevils_sites_per_block <- weevils_sites %>% group_by(block) %>% summarise(sites_per_block = n()) 

# species_richness
ants_richness <- read.csv('data/processed/ants_richness.csv', row.names = 1)
moths_richness <- read.csv('data/processed/moths_richness.csv', row.names = 1)
orthoptera_richness <- read.csv('data/processed/orthoptera_richness.csv', row.names = 1)
rove_beetles_richness <- read.csv('data/processed/rove_beetles_richness.csv', row.names = 1)
scarabs_richness <- read.csv('data/processed/scarabs_richness.csv', row.names = 1)
spiders_richness <- read.csv('data/processed/spiders_richness.csv', row.names = 1)
weevils_richness <- read.csv('data/processed/weevils_richness.csv', row.names = 1)


##### Get data -------------------------------

# Predictors and responses:  importance of process and ACD in each block
iCAMP_ants_summary <- read.csv("results/iCAMP_ants_summary.csv")
iCAMP_moths_summary <- read.csv("results/iCAMP_moths_summary.csv")
iCAMP_orthoptera_summary <- read.csv("results/iCAMP_orthoptera_summary.csv")
iCAMP_spiders_summary <- read.csv("results/iCAMP_spiders_summary.csv")
iCAMP_scarabs_summary <- read.csv("results/iCAMP_scarabs_summary.csv")
iCAMP_rove_beetles_summary <- read.csv("results/iCAMP_rove_beetles_summary.csv")
iCAMP_weevils_summary <- read.csv("results/iCAMP_weevils_summary.csv")

# label with name of taxonomic group
iCAMP_ants_summary$taxa <- 'Ants'
iCAMP_moths_summary$taxa <- 'Moths'
iCAMP_orthoptera_summary$taxa <- 'Orthoptera'
iCAMP_rove_beetles_summary$taxa <- 'Rove beetles'
iCAMP_scarabs_summary$taxa <- 'Scarabs'
iCAMP_spiders_summary$taxa <- 'Spiders'
iCAMP_weevils_summary$taxa <- 'Weevils'



# Join with covariates
iCAMP_ants_summary <- left_join(iCAMP_ants_summary, ants_richness[,c('richness','block')], by = 'block')
iCAMP_ants_summary <- left_join(iCAMP_ants_summary, ants_sites_per_block[,c('sites_per_block','block')], by = 'block')

iCAMP_moths_summary <- left_join(iCAMP_moths_summary, moths_richness[,c('richness','block')], by = 'block')
iCAMP_moths_summary <- left_join(iCAMP_moths_summary, moths_sites_per_block[,c('sites_per_block','block')], by = 'block')

iCAMP_orthoptera_summary <- left_join(iCAMP_orthoptera_summary, orthoptera_richness[,c('richness','block')], by = 'block')
iCAMP_orthoptera_summary <- left_join(iCAMP_orthoptera_summary, orthoptera_sites_per_block[,c('sites_per_block','block')], by = 'block')

iCAMP_rove_beetles_summary <- left_join(iCAMP_rove_beetles_summary, rove_beetles_richness[,c('richness','block')], by = 'block')
iCAMP_rove_beetles_summary <- left_join(iCAMP_rove_beetles_summary, rove_beetles_sites_per_block[,c('sites_per_block','block')], by = 'block')

iCAMP_scarabs_summary <- left_join(iCAMP_scarabs_summary, scarabs_richness[,c('richness','block')], by = 'block')
iCAMP_scarabs_summary <- left_join(iCAMP_scarabs_summary, scarabs_sites_per_block[,c('sites_per_block','block')], by = 'block')

iCAMP_spiders_summary <- left_join(iCAMP_spiders_summary, spiders_richness[,c('richness','block')], by = 'block')
iCAMP_spiders_summary <- left_join(iCAMP_spiders_summary, spiders_sites_per_block[,c('sites_per_block','block')], by = 'block')

iCAMP_weevils_summary <- left_join(iCAMP_weevils_summary, weevils_richness[,c('richness','block')], by = 'block')
iCAMP_weevils_summary <- left_join(iCAMP_weevils_summary, weevils_sites_per_block[,c('sites_per_block','block')], by = 'block')


iCAMP_all_summary <- as.data.frame(rbind(iCAMP_ants_summary, iCAMP_moths_summary, iCAMP_orthoptera_summary, iCAMP_spiders_summary,
                                         iCAMP_weevils_summary, iCAMP_rove_beetles_summary, iCAMP_scarabs_summary))



##### Figure 2A - relative importance -------------------
###### Calculate 95% quantiles #####

# Using bootstrapped 95% quantiles for error bars since the relative importance data are bounded between 0 and 1

set.seed(5)
bootstrap <- function(data){ # Data is one sampling block 
  for (i in 1:1000) {
    boot_sample <-sample(data, replace = TRUE)
    boot_lci <- quantile(boot_sample, probs = 0.025)
    boot_uci <- quantile(boot_sample, probs = 0.975)
    return(c(boot_lci, boot_uci))
    
  }
}


iCAMP_HeS_summary_rel_imp <- as.data.frame(iCAMP_all_summary %>% group_by(taxa) %>% 
                                             summarise(mean_rel_imp = mean(mean_HeS), 
                                                       lci_rel_imp = bootstrap(mean_HeS)[1], 
                                                       uci_rel_imp = bootstrap(mean_HeS)[2]))
iCAMP_HeS_summary_rel_imp$process <- 'HeS'
iCAMP_HeS_summary_rel_imp

iCAMP_HoS_summary_rel_imp <- as.data.frame(iCAMP_all_summary %>% group_by(taxa) %>% 
                                             summarise(mean_rel_imp = mean(mean_HoS), 
                                                       lci_rel_imp = bootstrap(mean_HoS)[1], 
                                                       uci_rel_imp = bootstrap(mean_HoS)[2]))
iCAMP_HoS_summary_rel_imp$process <- 'HoS'
iCAMP_HoS_summary_rel_imp 



iCAMP_DL_summary_rel_imp <- as.data.frame(iCAMP_all_summary %>% group_by(taxa) %>% 
                                            summarise(mean_rel_imp = mean(mean_DL), 
                                                      lci_rel_imp = bootstrap(mean_DL)[1], 
                                                      uci_rel_imp = bootstrap(mean_DL)[2]))
iCAMP_DL_summary_rel_imp$process <- 'DL'
iCAMP_DL_summary_rel_imp



iCAMP_HoD_summary_rel_imp <- as.data.frame(iCAMP_all_summary %>% group_by(taxa) %>% 
                                             summarise(mean_rel_imp= mean(mean_HoD), 
                                                       lci_rel_imp = bootstrap(mean_HoD)[1], 
                                                       uci_rel_imp = bootstrap(mean_HoD)[2]))
iCAMP_HoD_summary_rel_imp$process <- 'HoD'
iCAMP_HoD_summary_rel_imp




iCAMP_Dr_summary_rel_imp <- as.data.frame(iCAMP_all_summary %>% group_by(taxa) %>% 
                                            summarise(mean_rel_imp = mean(mean_Dr), 
                                                      lci_rel_imp = bootstrap(mean_Dr)[1], 
                                                      uci_rel_imp = bootstrap(mean_Dr)[2]))
iCAMP_Dr_summary_rel_imp$process <- 'Dr'
iCAMP_Dr_summary_rel_imp



###### Overall weighted mean ###### 

# Method from page 11 of this pdf https://www.meta-analysis.com/downloads/Meta%20Analysis%20Fixed%20vs%20Random%20effects.pdf (Borenstein et al 2007)
# This is the raw calculation for calculating the weighted mean for a meta-analysis in a fixed-effect model
# Weighting by within-sample variance, which is roughly proportional to sample size (according to the link above). 
# I'm using the range of the 95% confidence intervals as the within-study variance
# Fixed-effects model is appropriate because each sample (rel imp of process) was calculated using the exact same analysis (iCAMP)


weighted_mean_rel_imp <- function(data) { # data is the mean, lci and uci of relative importance for each taxa for one process
  
  # vi = 'within-study variance'  = range of 95% confidence intervals for each taxa
  # wi = weight = 1/vi
  # mean_rel_imp = 'effect size' = mean relative importance for each taxa
  # Mean = weighted mean = the overall weighted mean relative importance of this process (what we're trying to calculate)
  # SE = standard error
  # LCI = lower confidence interval
  # UCI = upper confidence interval
  
  # 1. Calculate within-study variance (vi)
  data$vi <- data$uci_rel_imp - data$lci_rel_imp
  # 2. Calculate weights (wi). 
  data$wi <- 1/data$vi
  #  wi will be infinite if mean_rel_imp is 0. Replacing infinities with 0. 
  is.na(data)<-sapply(data, is.infinite)
  data[is.na(data)]<-0
  # 3. Calculate overall weighted mean
  Mean <- sum(data$wi * data$mean_rel_imp) / sum(data$wi) 
  # 4. Calculate bootstrapped 95% quantiles
  for (i in 1:1000) {
    boot_sample <-sample(data$mean_rel_imp, replace = TRUE) #rather than data$mean_rel_imp, can you incorporate the weightings?
    boot_lci <- quantile(boot_sample, probs = 0.025)
    boot_uci <- quantile(boot_sample, probs = 0.975)
  }
  return(c(Mean, boot_lci, boot_uci))
}


# Calculate weighted overall means ( +/- 95% quantiles) for all processes

iCAMP_HeS_rel_imp_weighted_mean <- as.data.frame(t(weighted_mean_rel_imp(iCAMP_HeS_summary_rel_imp)))
colnames(iCAMP_HeS_rel_imp_weighted_mean) <- c('mean_rel_imp', 'lci_rel_imp', 'uci_rel_imp')
iCAMP_HeS_rel_imp_weighted_mean$taxa <- 'All'
iCAMP_HeS_rel_imp_weighted_mean$process <- 'Heterogeneous selection'
iCAMP_HeS_rel_imp_weighted_mean

iCAMP_HoS_rel_imp_weighted_mean <- as.data.frame(t(weighted_mean_rel_imp(iCAMP_HoS_summary_rel_imp)))
colnames(iCAMP_HoS_rel_imp_weighted_mean) <- c('mean_rel_imp', 'lci_rel_imp', 'uci_rel_imp')
iCAMP_HoS_rel_imp_weighted_mean$taxa <- 'All'
iCAMP_HoS_rel_imp_weighted_mean$process <- 'Homogeneous selection'
iCAMP_HoS_rel_imp_weighted_mean

iCAMP_DL_rel_imp_weighted_mean <- as.data.frame(t(weighted_mean_rel_imp(iCAMP_DL_summary_rel_imp)))
colnames(iCAMP_DL_rel_imp_weighted_mean) <- c('mean_rel_imp', 'lci_rel_imp', 'uci_rel_imp')
iCAMP_DL_rel_imp_weighted_mean$taxa <- 'All'
iCAMP_DL_rel_imp_weighted_mean$process <- 'Dispersal limitation'
iCAMP_DL_rel_imp_weighted_mean

iCAMP_HoD_rel_imp_weighted_mean <- as.data.frame(t(weighted_mean_rel_imp(iCAMP_HoD_summary_rel_imp)))
colnames(iCAMP_HoD_rel_imp_weighted_mean) <- c('mean_rel_imp', 'lci_rel_imp', 'uci_rel_imp')
iCAMP_HoD_rel_imp_weighted_mean$taxa <- 'All'
iCAMP_HoD_rel_imp_weighted_mean$process <- 'Homogenizing Dispersal'
iCAMP_HoD_rel_imp_weighted_mean

iCAMP_Dr_rel_imp_weighted_mean <- as.data.frame(t(weighted_mean_rel_imp(iCAMP_Dr_summary_rel_imp)))
colnames(iCAMP_Dr_rel_imp_weighted_mean) <- c('mean_rel_imp', 'lci_rel_imp', 'uci_rel_imp')
iCAMP_Dr_rel_imp_weighted_mean$taxa <- 'All'
iCAMP_Dr_rel_imp_weighted_mean$process <- 'Drift'
iCAMP_Dr_rel_imp_weighted_mean



iCAMP_HeS_summary_rel_imp$process <- 'Heterogeneous selection'
iCAMP_HoS_summary_rel_imp$process <- 'Homogeneous selection'
iCAMP_DL_summary_rel_imp$process <- 'Dispersal limitation'
iCAMP_HoD_summary_rel_imp$process <- 'Homogenizing dispersal'
iCAMP_Dr_summary_rel_imp$process <- 'Drift'


iCAMP_all_rel_imp <- as.data.frame(rbind(iCAMP_HeS_summary_rel_imp, iCAMP_HeS_rel_imp_weighted_mean,
                                         iCAMP_HoS_summary_rel_imp, iCAMP_HoS_rel_imp_weighted_mean,
                                         iCAMP_DL_summary_rel_imp, iCAMP_DL_rel_imp_weighted_mean,
                                         iCAMP_HoD_summary_rel_imp, iCAMP_HoD_rel_imp_weighted_mean,
                                         iCAMP_Dr_summary_rel_imp, iCAMP_Dr_rel_imp_weighted_mean))

iCAMP_all_rel_imp 

write.excel <- function(x,row.names=FALSE,col.names=TRUE,...) {
  write.table(x,"clipboard",sep="\t",row.names=row.names,col.names=col.names,...)
}


write.excel(iCAMP_all_rel_imp)



###### Plot #####


colours <-  c('black', '#a6cee3',  '#FB9A99', '#CAB2D6', '#1F78B4',  'grey',   '#E31A1C', '#6A3D9A')
shapes <-  c(19, 16, 17, 15, 16, 18, 17, 15)

process_order <- c('Heterogeneous selection', 'Homogeneous selection', 'Dispersal limitation', 'Homogenizing dispersal', 'Drift')

iCAMP_all_rel_imp$process <- str_replace(iCAMP_all_rel_imp$process, "Homogenizing Dispersal", "Homogenizing dispersal")


str(iCAMP_all_rel_imp)


library(ggplot2)
iCAMP_all_rel_imp <- na.omit(iCAMP_all_rel_imp)
iCAMP_all_rel_imp_plot <- ggplot(data = iCAMP_all_rel_imp, aes(y = mean_rel_imp, x = factor(process, level = process_order),fill = taxa, colour = taxa, shape = taxa)) +
  geom_errorbar(data = iCAMP_all_rel_imp, aes( ymin = lci_rel_imp, ymax = uci_rel_imp), width = 0,
                position=position_dodge(width=0.8), show.legend = FALSE, linewidth = 0.5) +
  geom_point(size = 4, position=position_dodge(width=0.8), alpha = 0.9) +
  
  labs(x = "", y = "Relative importance", 
       shape = "Taxa", colour = "Taxa", fill = "Taxa") +
  
  scale_colour_manual(values = colours,
                      labels = c('All',  'Ants', 'Moths', 'Orthoptera', 'Rove beetles','Scarabs', 'Spiders',  'Weevils'))+
  
  scale_shape_manual(values = shapes, 
                     labels = c('All', 'Ants','Moths',  'Orthoptera', 'Rove beetles', 'Scarabs', 'Spiders',  'Weevils'))+
  
  scale_x_discrete(labels = c('Heterogeneous \n selection', 'Homogeneous \n selection', 'Dispersal \n limitation', 
                              'Homogeneous \n dispersal', 'Drift and others')) +
  geom_vline(aes(xintercept =1.5), colour = 'grey')  +
  geom_vline(aes(xintercept =2.5), colour = 'grey')  +
  geom_vline(aes(xintercept =3.5), colour = 'grey')  +
  geom_vline(aes(xintercept =4.5), colour = 'grey')  +
  geom_vline(aes(xintercept =5.6), colour = 'grey')  +
  geom_vline(aes(xintercept =5.6), colour = 'grey')  +
  theme_classic() +
  theme(axis.text.y=element_text(size=20, colour = 'black'), 
        axis.text.x=element_text(size=15, colour = 'black'), 
        axis.title=element_text(size=20),
        legend.title=element_blank(),
        legend.text=element_text(size=18), 
        legend.position = c(0.1,0.7),
        plot.margin = unit(c(0.5, 0.5, 0.5, 0.5), "cm")) 
iCAMP_all_rel_imp_plot




##### Figure 2B - effect of logging -------------------------------

## beta regression
iCAMP_all_summary[iCAMP_all_summary == 0] <- 0.0001
iCAMP_all_summary[iCAMP_all_summary == 1] <- 0.9999


###### Dispersal limitation -----------------------------

betareg_DL_all <- glmmTMB(mean_DL ~ Mean_logACD + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_all)


betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Ants')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)
betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Moths')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)
betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Orthoptera')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)
betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Rove beetles')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)
betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Scarabs')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)
betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Spiders')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)
betareg_DL_taxa <- glmmTMB(mean_DL ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Weevils')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_DL_taxa)



###### Drift ---------------------------------------------
betareg_Dr_all <- glmmTMB(mean_Dr ~ Mean_logACD + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_all)


betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Ants')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)
betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Moths')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)
betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Orthoptera')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)
betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Rove beetles')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)
betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Scarabs')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)
betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Spiders')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)
betareg_Dr_taxa <- glmmTMB(mean_Dr ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Weevils')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_Dr_taxa)


###### Plot ###########


colours <-  c('#a6cee3',  '#FB9A99', '#CAB2D6', '#1F78B4',  'grey',   '#E31A1C', '#6A3D9A')
shapes <-  c(16, 17, 15, 16, 18, 17, 15)
linetypes <- c('longdash', 'dotted', 'dotdash', 'longdash', 'longdash', 'dotted', 'dotdash')

DL_betareg_graph <- ggplot() +
  geom_point(data = iCAMP_all_summary, aes(x = Mean_logACD, y = mean_DL, colour = taxa, shape = taxa), size = 2.9, stroke = 1.058) + 
  
  scale_colour_manual(values = colours, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_shape_manual(values = shapes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_linetype_manual(values = linetypes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  
  #all
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_DL_all, re.form = NA, type = 'response')), colour = 'black', size = 1) +  
  
  # by taxa
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_DL_taxa, re.form = NA, type = 'response'), linetype = taxa, colour = taxa), size = 0.8) +  
  
  labs(x = expression('log'[10]~'(ACD)'),y = 'Dispersal limitation') +

  theme_classic() +
  theme( axis.text=element_text(size=19, colour = 'black'),  
         axis.title=element_text(size=19),
         legend.position = 'none',
         legend.margin = margin(0, 0, 0, 0),
         legend.text = element_text(size = 13.5),
         legend.title = element_blank(),
         legend.key.height = unit(0.5, 'cm'),
         legend.key.width = unit(1, 'cm'), 
         plot.margin = margin(0.7,0.7,0.7,0.7, 'cm')) 

DL_betareg_graph



Dr_betareg_graph <- ggplot() +
  geom_point(data = iCAMP_all_summary, aes(x = Mean_logACD, y = mean_Dr, colour = taxa, shape = taxa), size = 2.9, stroke = 1.058) + 
  
  scale_colour_manual(values = colours, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_shape_manual(values = shapes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_linetype_manual(values = linetypes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  
  #all
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_Dr_all, re.form = NA, type = 'response')), linetype = 'dotted', colour = 'black', size = 2) +  
  
  # by taxa
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_Dr_taxa, re.form = NA, type = 'response'), linetype = taxa, colour = taxa), size = 0.8) +  
  
  labs(x = expression('log'[10]~'(ACD)'),y = 'Drift') +
  
  theme_classic() +
  theme( axis.text=element_text(size=19, colour = 'black'),  
         axis.title=element_text(size=19),
         legend.position = 'none',
         legend.margin = margin(0, 0, 0, 0),
         legend.text = element_text(size = 13.5),
         legend.title = element_blank(),
         legend.key.height = unit(0.5, 'cm'),
         legend.key.width = unit(1, 'cm'), 
         plot.margin = margin(0.7,0.7,0.7,0.7, 'cm')) 

Dr_betareg_graph






###### Plot both together in panelled figure #######

DL_Dr_plot <- plot_grid( DL_betareg_graph, Dr_betareg_graph,
                       ncol = 2,  align = 'v', labels = c('B', 'C'),
                       label_size = 20, label_x = 0.2)
DL_Dr_plot


iCAMP_plot_panelled <- plot_grid(iCAMP_all_rel_imp_plot, DL_Dr_plot,
                                 nrow = 2,  align = 'h', labels = c('A', '', 'B', 'C'),
                                 label_size = 20, label_x = 0.09)

iCAMP_plot_panelled




#### Non-dominant processes in supplementary info -------------


###### Heterogeneous selection ---------------------------------------------
betareg_HeS_all <- glmmTMB(mean_HeS ~ Mean_logACD + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_all)


betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Ants')  + (1|richness) + (sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)
betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Moths')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)
betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Orthoptera')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)
betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Rove beetles')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)
betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Scarabs')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)
betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Spiders')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)
betareg_HeS_taxa <- glmmTMB(mean_HeS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Weevils')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HeS_taxa)


###### Plot ###########


colours <-  c('#a6cee3',  '#FB9A99', '#CAB2D6', '#1F78B4',  'grey',   '#E31A1C', '#6A3D9A')
shapes <-  c(16, 17, 15, 16, 18, 17, 15)
linetypes <- c('longdash', 'dotted', 'dotdash', 'longdash', 'longdash', 'dotted', 'dotdash')


HeS_betareg_graph <- ggplot() +
  geom_point(data = iCAMP_all_summary, aes(x = Mean_logACD, y = mean_HeS, colour = taxa, shape = taxa), size = 2.9, stroke = 1.058) + 
  
  scale_colour_manual(values = colours, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_shape_manual(values = shapes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_linetype_manual(values = linetypes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  
  #all
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_HeS_all, re.form = NA, type = 'response')), linetype = 'dotted', colour = 'black', size = 2) +  
  
  # by taxa
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_HeS_taxa, re.form = NA, type = 'response'), linetype = taxa, colour = taxa), size = 0.8) +  
  
  labs(x = expression('log'[10]~'(ACD)'),y = 'Heterogeneous selection') +
  
  theme_classic() +
  theme( axis.text=element_text(size=19, colour = 'black'),  
         axis.title=element_text(size=19),
         legend.position = c(0.2,0.8),
         legend.margin = margin(0, 0, 0, 0),
         legend.text = element_text(size = 13.5),
         legend.title = element_blank(),
         legend.key.height = unit(0.5, 'cm'),
         legend.key.width = unit(1, 'cm'), 
         plot.margin = margin(0.7,0.7,0.7,0.7, 'cm')) 

HeS_betareg_graph


###### Homogeneous selection ---------------------------------------------
betareg_HoS_all <- glmmTMB(mean_HoS ~ Mean_logACD + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_all)


betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Ants')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)
betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Moths')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)
betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Orthoptera')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)
betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Rove beetles')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)
betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Scarabs')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)
betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Spiders')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)
betareg_HoS_taxa <- glmmTMB(mean_HoS ~ Mean_logACD * relevel(as.factor(taxa), ref = 'Weevils')  + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoS_taxa)


###### Plot ###########


colours <-  c('#a6cee3',  '#FB9A99', '#CAB2D6', '#1F78B4',  'grey',   '#E31A1C', '#6A3D9A')
shapes <-  c(16, 17, 15, 16, 18, 17, 15)
linetypes <- c('longdash', 'dotted', 'dotdash', 'longdash', 'longdash', 'dotted', 'dotdash')


HoS_betareg_graph <- ggplot() +
  geom_point(data = iCAMP_all_summary, aes(x = Mean_logACD, y = mean_HoS, colour = taxa, shape = taxa), size = 2.9, stroke = 1.058) + 
  
  scale_colour_manual(values = colours, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_shape_manual(values = shapes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  scale_linetype_manual(values = linetypes, labels = c('Ants', 'Moths', 'Orthoptera', 'Rove beetles', 'Scarabs', 'Spdiers', 'Weevils')) +
  
  #all
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_HoS_all, re.form = NA, type = 'response')), linetype = 'dotted', colour = 'black', size = 2) +  
  
  # by taxa
  geom_line(data = iCAMP_all_summary, aes(x = Mean_logACD,  y =predict(betareg_HoS_taxa, re.form = NA, type = 'response'), linetype = taxa, colour = taxa), size = 0.8) +  
  
  labs(x = expression('log'[10]~'(ACD)'),y = 'Homogeneous selection') +
  
  theme_classic() +
  theme( axis.text=element_text(size=19, colour = 'black'),  
         axis.title=element_text(size=19),
         legend.position = 'none',
         legend.margin = margin(0, 0, 0, 0),
         legend.text = element_text(size = 13.5),
         legend.title = element_blank(),
         legend.key.height = unit(0.5, 'cm'),
         legend.key.width = unit(1, 'cm'), 
         plot.margin = margin(0.7,0.7,0.7,0.7, 'cm')) 

HoS_betareg_graph


###### Plot both together in panelled figure ########

HeS_HoS_plot <- plot_grid( HeS_betareg_graph, HoS_betareg_graph,
                         ncol = 2,  align = 'v', labels = c('A', 'B'),
                         label_size = 20, label_x = 0.2)
HeS_HoS_plot



##### Homogenising Dispersal -----------
betareg_HoD_all <- glmmTMB(mean_HoD ~ Mean_logACD + (1|richness) + (1|sites_per_block), iCAMP_all_summary, beta_family(link = 'logit'))
summary(betareg_HoD_all)

library(DHARMa)
plotResiduals(betareg_HoD_all)
plotResiduals(betareg_HoS_all)
plotResiduals(betareg_HeS_all)
plotResiduals(betareg_DL_all)
plotResiduals(betareg_Dr_all)

